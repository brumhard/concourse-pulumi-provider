// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package concourse

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Pipeline struct {
	pulumi.CustomResourceState

	// The name of the pipeline.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewPipeline registers a new resource with the given unique name, arguments, and options.
func NewPipeline(ctx *pulumi.Context,
	name string, args *PipelineArgs, opts ...pulumi.ResourceOption) (*Pipeline, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Jobs == nil {
		return nil, errors.New("invalid value for required argument 'Jobs'")
	}
	var resource Pipeline
	err := ctx.RegisterResource("concourse:index:Pipeline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPipeline gets an existing Pipeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipeline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PipelineState, opts ...pulumi.ResourceOption) (*Pipeline, error) {
	var resource Pipeline
	err := ctx.ReadResource("concourse:index:Pipeline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pipeline resources.
type pipelineState struct {
}

type PipelineState struct {
}

func (PipelineState) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineState)(nil)).Elem()
}

type pipelineArgs struct {
	// Visual configurations for personalizing your pipeline.
	Display *DisplayOptions `pulumi:"display"`
	// A list of job groups to use for organizing jobs in the web UI. Groups have no functional effect on your pipeline. They are purely for making it easier to grok large pipelines in the web UI.
	Groups []Group `pulumi:"groups"`
	// A set of jobs for the pipeline to continuously schedule. At least one job is required for a pipeline to be valid.
	Jobs []Job `pulumi:"jobs"`
	// A set of resource types for resources within the pipeline to use.
	Resource_types []ResourceType `pulumi:"resource_types"`
	// A set of resources for the pipeline to continuously check.
	Resources []Resource `pulumi:"resources"`
}

// The set of arguments for constructing a Pipeline resource.
type PipelineArgs struct {
	// Visual configurations for personalizing your pipeline.
	Display DisplayOptionsPtrInput
	// A list of job groups to use for organizing jobs in the web UI. Groups have no functional effect on your pipeline. They are purely for making it easier to grok large pipelines in the web UI.
	Groups GroupArrayInput
	// A set of jobs for the pipeline to continuously schedule. At least one job is required for a pipeline to be valid.
	Jobs JobArrayInput
	// A set of resource types for resources within the pipeline to use.
	Resource_types ResourceTypeArrayInput
	// A set of resources for the pipeline to continuously check.
	Resources ResourceArrayInput
}

func (PipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineArgs)(nil)).Elem()
}

type PipelineInput interface {
	pulumi.Input

	ToPipelineOutput() PipelineOutput
	ToPipelineOutputWithContext(ctx context.Context) PipelineOutput
}

func (*Pipeline) ElementType() reflect.Type {
	return reflect.TypeOf((*Pipeline)(nil))
}

func (i *Pipeline) ToPipelineOutput() PipelineOutput {
	return i.ToPipelineOutputWithContext(context.Background())
}

func (i *Pipeline) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineOutput)
}

func (i *Pipeline) ToPipelinePtrOutput() PipelinePtrOutput {
	return i.ToPipelinePtrOutputWithContext(context.Background())
}

func (i *Pipeline) ToPipelinePtrOutputWithContext(ctx context.Context) PipelinePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelinePtrOutput)
}

type PipelinePtrInput interface {
	pulumi.Input

	ToPipelinePtrOutput() PipelinePtrOutput
	ToPipelinePtrOutputWithContext(ctx context.Context) PipelinePtrOutput
}

type pipelinePtrType PipelineArgs

func (*pipelinePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Pipeline)(nil))
}

func (i *pipelinePtrType) ToPipelinePtrOutput() PipelinePtrOutput {
	return i.ToPipelinePtrOutputWithContext(context.Background())
}

func (i *pipelinePtrType) ToPipelinePtrOutputWithContext(ctx context.Context) PipelinePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelinePtrOutput)
}

// PipelineArrayInput is an input type that accepts PipelineArray and PipelineArrayOutput values.
// You can construct a concrete instance of `PipelineArrayInput` via:
//
//          PipelineArray{ PipelineArgs{...} }
type PipelineArrayInput interface {
	pulumi.Input

	ToPipelineArrayOutput() PipelineArrayOutput
	ToPipelineArrayOutputWithContext(context.Context) PipelineArrayOutput
}

type PipelineArray []PipelineInput

func (PipelineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pipeline)(nil)).Elem()
}

func (i PipelineArray) ToPipelineArrayOutput() PipelineArrayOutput {
	return i.ToPipelineArrayOutputWithContext(context.Background())
}

func (i PipelineArray) ToPipelineArrayOutputWithContext(ctx context.Context) PipelineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineArrayOutput)
}

// PipelineMapInput is an input type that accepts PipelineMap and PipelineMapOutput values.
// You can construct a concrete instance of `PipelineMapInput` via:
//
//          PipelineMap{ "key": PipelineArgs{...} }
type PipelineMapInput interface {
	pulumi.Input

	ToPipelineMapOutput() PipelineMapOutput
	ToPipelineMapOutputWithContext(context.Context) PipelineMapOutput
}

type PipelineMap map[string]PipelineInput

func (PipelineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pipeline)(nil)).Elem()
}

func (i PipelineMap) ToPipelineMapOutput() PipelineMapOutput {
	return i.ToPipelineMapOutputWithContext(context.Background())
}

func (i PipelineMap) ToPipelineMapOutputWithContext(ctx context.Context) PipelineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineMapOutput)
}

type PipelineOutput struct{ *pulumi.OutputState }

func (PipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Pipeline)(nil))
}

func (o PipelineOutput) ToPipelineOutput() PipelineOutput {
	return o
}

func (o PipelineOutput) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return o
}

func (o PipelineOutput) ToPipelinePtrOutput() PipelinePtrOutput {
	return o.ToPipelinePtrOutputWithContext(context.Background())
}

func (o PipelineOutput) ToPipelinePtrOutputWithContext(ctx context.Context) PipelinePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Pipeline) *Pipeline {
		return &v
	}).(PipelinePtrOutput)
}

type PipelinePtrOutput struct{ *pulumi.OutputState }

func (PipelinePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pipeline)(nil))
}

func (o PipelinePtrOutput) ToPipelinePtrOutput() PipelinePtrOutput {
	return o
}

func (o PipelinePtrOutput) ToPipelinePtrOutputWithContext(ctx context.Context) PipelinePtrOutput {
	return o
}

func (o PipelinePtrOutput) Elem() PipelineOutput {
	return o.ApplyT(func(v *Pipeline) Pipeline {
		if v != nil {
			return *v
		}
		var ret Pipeline
		return ret
	}).(PipelineOutput)
}

type PipelineArrayOutput struct{ *pulumi.OutputState }

func (PipelineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Pipeline)(nil))
}

func (o PipelineArrayOutput) ToPipelineArrayOutput() PipelineArrayOutput {
	return o
}

func (o PipelineArrayOutput) ToPipelineArrayOutputWithContext(ctx context.Context) PipelineArrayOutput {
	return o
}

func (o PipelineArrayOutput) Index(i pulumi.IntInput) PipelineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Pipeline {
		return vs[0].([]Pipeline)[vs[1].(int)]
	}).(PipelineOutput)
}

type PipelineMapOutput struct{ *pulumi.OutputState }

func (PipelineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Pipeline)(nil))
}

func (o PipelineMapOutput) ToPipelineMapOutput() PipelineMapOutput {
	return o
}

func (o PipelineMapOutput) ToPipelineMapOutputWithContext(ctx context.Context) PipelineMapOutput {
	return o
}

func (o PipelineMapOutput) MapIndex(k pulumi.StringInput) PipelineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Pipeline {
		return vs[0].(map[string]Pipeline)[vs[1].(string)]
	}).(PipelineOutput)
}

func init() {
	pulumi.RegisterOutputType(PipelineOutput{})
	pulumi.RegisterOutputType(PipelinePtrOutput{})
	pulumi.RegisterOutputType(PipelineArrayOutput{})
	pulumi.RegisterOutputType(PipelineMapOutput{})
}
