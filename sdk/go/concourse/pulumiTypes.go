// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package concourse

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Group struct {
	// A list of jobs that should appear in this group. A job may appear in multiple groups. Neighbours of jobs in the current group will also appear on the same page in order to give context of the location of the group in the pipeline. You may also use any valid glob to represent several jobs.
	Jobs []string `pulumi:"jobs"`
	// A unique name for the group. This should be short and simple as it will be used as the tab name for navigation.
	Name string `pulumi:"name"`
}

// GroupInput is an input type that accepts GroupArgs and GroupOutput values.
// You can construct a concrete instance of `GroupInput` via:
//
//          GroupArgs{...}
type GroupInput interface {
	pulumi.Input

	ToGroupOutput() GroupOutput
	ToGroupOutputWithContext(context.Context) GroupOutput
}

type GroupArgs struct {
	// A list of jobs that should appear in this group. A job may appear in multiple groups. Neighbours of jobs in the current group will also appear on the same page in order to give context of the location of the group in the pipeline. You may also use any valid glob to represent several jobs.
	Jobs pulumi.StringArrayInput `pulumi:"jobs"`
	// A unique name for the group. This should be short and simple as it will be used as the tab name for navigation.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Group)(nil)).Elem()
}

func (i GroupArgs) ToGroupOutput() GroupOutput {
	return i.ToGroupOutputWithContext(context.Background())
}

func (i GroupArgs) ToGroupOutputWithContext(ctx context.Context) GroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupOutput)
}

// GroupArrayInput is an input type that accepts GroupArray and GroupArrayOutput values.
// You can construct a concrete instance of `GroupArrayInput` via:
//
//          GroupArray{ GroupArgs{...} }
type GroupArrayInput interface {
	pulumi.Input

	ToGroupArrayOutput() GroupArrayOutput
	ToGroupArrayOutputWithContext(context.Context) GroupArrayOutput
}

type GroupArray []GroupInput

func (GroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Group)(nil)).Elem()
}

func (i GroupArray) ToGroupArrayOutput() GroupArrayOutput {
	return i.ToGroupArrayOutputWithContext(context.Background())
}

func (i GroupArray) ToGroupArrayOutputWithContext(ctx context.Context) GroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupArrayOutput)
}

type GroupOutput struct{ *pulumi.OutputState }

func (GroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Group)(nil)).Elem()
}

func (o GroupOutput) ToGroupOutput() GroupOutput {
	return o
}

func (o GroupOutput) ToGroupOutputWithContext(ctx context.Context) GroupOutput {
	return o
}

// A list of jobs that should appear in this group. A job may appear in multiple groups. Neighbours of jobs in the current group will also appear on the same page in order to give context of the location of the group in the pipeline. You may also use any valid glob to represent several jobs.
func (o GroupOutput) Jobs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Group) []string { return v.Jobs }).(pulumi.StringArrayOutput)
}

// A unique name for the group. This should be short and simple as it will be used as the tab name for navigation.
func (o GroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Group) string { return v.Name }).(pulumi.StringOutput)
}

type GroupArrayOutput struct{ *pulumi.OutputState }

func (GroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Group)(nil)).Elem()
}

func (o GroupArrayOutput) ToGroupArrayOutput() GroupArrayOutput {
	return o
}

func (o GroupArrayOutput) ToGroupArrayOutputWithContext(ctx context.Context) GroupArrayOutput {
	return o
}

func (o GroupArrayOutput) Index(i pulumi.IntInput) GroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Group {
		return vs[0].([]Group)[vs[1].(int)]
	}).(GroupOutput)
}

type Job struct {
	// Step to execute regardless of whether the job succeeds, fails, errors, or aborts.
	Ensure *Step `pulumi:"ensure"`
	// If set, specifies a maximum number of builds to run at a time. If serial or serial_groups are set, they take precedence and force this value to be 1.
	MaxInFlight *float64 `pulumi:"maxInFlight"`
	// The name of the job. This should be short; it will show up in URLs.
	Name string `pulumi:"name"`
	// Step to execute when the job aborts.
	OnAbort *Step `pulumi:"onAbort"`
	// Step to execute when the job errors.
	OnError *Step `pulumi:"onError"`
	// Step to execute when the job fails.
	OnFailure *Step `pulumi:"onFailure"`
	// Step to execute when the job succeeds.
	OnSuccess *Step  `pulumi:"onSuccess"`
	Plan      []Step `pulumi:"plan"`
	// Default false. If set to true, the build log of this job will be viewable by unauthenticated users. Unauthenticated users will always be able to see the inputs, outputs, and build status history of a job. This is useful if you would like to expose your pipeline publicly without showing sensitive information in the build log.
	Public *bool `pulumi:"public"`
	// Default false. If set to true, builds will queue up and execute one-by-one, rather than executing in parallel.
	Serial *bool `pulumi:"serial"`
}

// JobInput is an input type that accepts JobArgs and JobOutput values.
// You can construct a concrete instance of `JobInput` via:
//
//          JobArgs{...}
type JobInput interface {
	pulumi.Input

	ToJobOutput() JobOutput
	ToJobOutputWithContext(context.Context) JobOutput
}

type JobArgs struct {
	// Step to execute regardless of whether the job succeeds, fails, errors, or aborts.
	Ensure StepPtrInput `pulumi:"ensure"`
	// If set, specifies a maximum number of builds to run at a time. If serial or serial_groups are set, they take precedence and force this value to be 1.
	MaxInFlight pulumi.Float64PtrInput `pulumi:"maxInFlight"`
	// The name of the job. This should be short; it will show up in URLs.
	Name pulumi.StringInput `pulumi:"name"`
	// Step to execute when the job aborts.
	OnAbort StepPtrInput `pulumi:"onAbort"`
	// Step to execute when the job errors.
	OnError StepPtrInput `pulumi:"onError"`
	// Step to execute when the job fails.
	OnFailure StepPtrInput `pulumi:"onFailure"`
	// Step to execute when the job succeeds.
	OnSuccess StepPtrInput   `pulumi:"onSuccess"`
	Plan      StepArrayInput `pulumi:"plan"`
	// Default false. If set to true, the build log of this job will be viewable by unauthenticated users. Unauthenticated users will always be able to see the inputs, outputs, and build status history of a job. This is useful if you would like to expose your pipeline publicly without showing sensitive information in the build log.
	Public pulumi.BoolPtrInput `pulumi:"public"`
	// Default false. If set to true, builds will queue up and execute one-by-one, rather than executing in parallel.
	Serial pulumi.BoolPtrInput `pulumi:"serial"`
}

func (JobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Job)(nil)).Elem()
}

func (i JobArgs) ToJobOutput() JobOutput {
	return i.ToJobOutputWithContext(context.Background())
}

func (i JobArgs) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutput)
}

// JobArrayInput is an input type that accepts JobArray and JobArrayOutput values.
// You can construct a concrete instance of `JobArrayInput` via:
//
//          JobArray{ JobArgs{...} }
type JobArrayInput interface {
	pulumi.Input

	ToJobArrayOutput() JobArrayOutput
	ToJobArrayOutputWithContext(context.Context) JobArrayOutput
}

type JobArray []JobInput

func (JobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Job)(nil)).Elem()
}

func (i JobArray) ToJobArrayOutput() JobArrayOutput {
	return i.ToJobArrayOutputWithContext(context.Background())
}

func (i JobArray) ToJobArrayOutputWithContext(ctx context.Context) JobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobArrayOutput)
}

type JobOutput struct{ *pulumi.OutputState }

func (JobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Job)(nil)).Elem()
}

func (o JobOutput) ToJobOutput() JobOutput {
	return o
}

func (o JobOutput) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return o
}

// Step to execute regardless of whether the job succeeds, fails, errors, or aborts.
func (o JobOutput) Ensure() StepPtrOutput {
	return o.ApplyT(func(v Job) *Step { return v.Ensure }).(StepPtrOutput)
}

// If set, specifies a maximum number of builds to run at a time. If serial or serial_groups are set, they take precedence and force this value to be 1.
func (o JobOutput) MaxInFlight() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Job) *float64 { return v.MaxInFlight }).(pulumi.Float64PtrOutput)
}

// The name of the job. This should be short; it will show up in URLs.
func (o JobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Job) string { return v.Name }).(pulumi.StringOutput)
}

// Step to execute when the job aborts.
func (o JobOutput) OnAbort() StepPtrOutput {
	return o.ApplyT(func(v Job) *Step { return v.OnAbort }).(StepPtrOutput)
}

// Step to execute when the job errors.
func (o JobOutput) OnError() StepPtrOutput {
	return o.ApplyT(func(v Job) *Step { return v.OnError }).(StepPtrOutput)
}

// Step to execute when the job fails.
func (o JobOutput) OnFailure() StepPtrOutput {
	return o.ApplyT(func(v Job) *Step { return v.OnFailure }).(StepPtrOutput)
}

// Step to execute when the job succeeds.
func (o JobOutput) OnSuccess() StepPtrOutput {
	return o.ApplyT(func(v Job) *Step { return v.OnSuccess }).(StepPtrOutput)
}

func (o JobOutput) Plan() StepArrayOutput {
	return o.ApplyT(func(v Job) []Step { return v.Plan }).(StepArrayOutput)
}

// Default false. If set to true, the build log of this job will be viewable by unauthenticated users. Unauthenticated users will always be able to see the inputs, outputs, and build status history of a job. This is useful if you would like to expose your pipeline publicly without showing sensitive information in the build log.
func (o JobOutput) Public() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Job) *bool { return v.Public }).(pulumi.BoolPtrOutput)
}

// Default false. If set to true, builds will queue up and execute one-by-one, rather than executing in parallel.
func (o JobOutput) Serial() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Job) *bool { return v.Serial }).(pulumi.BoolPtrOutput)
}

type JobArrayOutput struct{ *pulumi.OutputState }

func (JobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Job)(nil)).Elem()
}

func (o JobArrayOutput) ToJobArrayOutput() JobArrayOutput {
	return o
}

func (o JobArrayOutput) ToJobArrayOutputWithContext(ctx context.Context) JobArrayOutput {
	return o
}

func (o JobArrayOutput) Index(i pulumi.IntInput) JobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Job {
		return vs[0].([]Job)[vs[1].(int)]
	}).(JobOutput)
}

type Resource struct {
	// Default 1m. The interval on which to check for new versions of the resource. Acceptable interval options are defined by the time.ParseDuration function. If set to never the resource will not be automatically checked. The resource can still be checked manually via the web UI, fly, or webhooks.
	CheckEvery *string `pulumi:"checkEvery"`
	// The name of the resource. This should be short and simple. This name will be referenced by build plans of jobs in the pipeline.
	Name string `pulumi:"name"`
	// Default false. If set to true, the metadata for each version of the resource will be viewable by unauthenticated users (assuming the pipeline has been exposed).
	Public *bool `pulumi:"public"`
	// The configuration for the resource. This varies by resource type, and is a black box to Concourse; it is blindly passed to the resource at runtime.
	Source map[string]string `pulumi:"source"`
	// Default []. A list of tags to determine which workers the checks will be performed on. You'll want to specify this if the source is internal to a worker's network, for example.
	Tags []string `pulumi:"tags"`
	// The resource type implementing the resource.
	Type string `pulumi:"type"`
	// If specified, web hooks can be sent to trigger an immediate check of the resource, specifying this value as a primitive form of authentication via query params.
	WebhookToken *string `pulumi:"webhookToken"`
}

// ResourceInput is an input type that accepts ResourceArgs and ResourceOutput values.
// You can construct a concrete instance of `ResourceInput` via:
//
//          ResourceArgs{...}
type ResourceInput interface {
	pulumi.Input

	ToResourceOutput() ResourceOutput
	ToResourceOutputWithContext(context.Context) ResourceOutput
}

type ResourceArgs struct {
	// Default 1m. The interval on which to check for new versions of the resource. Acceptable interval options are defined by the time.ParseDuration function. If set to never the resource will not be automatically checked. The resource can still be checked manually via the web UI, fly, or webhooks.
	CheckEvery pulumi.StringPtrInput `pulumi:"checkEvery"`
	// The name of the resource. This should be short and simple. This name will be referenced by build plans of jobs in the pipeline.
	Name pulumi.StringInput `pulumi:"name"`
	// Default false. If set to true, the metadata for each version of the resource will be viewable by unauthenticated users (assuming the pipeline has been exposed).
	Public pulumi.BoolPtrInput `pulumi:"public"`
	// The configuration for the resource. This varies by resource type, and is a black box to Concourse; it is blindly passed to the resource at runtime.
	Source pulumi.StringMapInput `pulumi:"source"`
	// Default []. A list of tags to determine which workers the checks will be performed on. You'll want to specify this if the source is internal to a worker's network, for example.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// The resource type implementing the resource.
	Type pulumi.StringInput `pulumi:"type"`
	// If specified, web hooks can be sent to trigger an immediate check of the resource, specifying this value as a primitive form of authentication via query params.
	WebhookToken pulumi.StringPtrInput `pulumi:"webhookToken"`
}

func (ResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Resource)(nil)).Elem()
}

func (i ResourceArgs) ToResourceOutput() ResourceOutput {
	return i.ToResourceOutputWithContext(context.Background())
}

func (i ResourceArgs) ToResourceOutputWithContext(ctx context.Context) ResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceOutput)
}

// ResourceArrayInput is an input type that accepts ResourceArray and ResourceArrayOutput values.
// You can construct a concrete instance of `ResourceArrayInput` via:
//
//          ResourceArray{ ResourceArgs{...} }
type ResourceArrayInput interface {
	pulumi.Input

	ToResourceArrayOutput() ResourceArrayOutput
	ToResourceArrayOutputWithContext(context.Context) ResourceArrayOutput
}

type ResourceArray []ResourceInput

func (ResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Resource)(nil)).Elem()
}

func (i ResourceArray) ToResourceArrayOutput() ResourceArrayOutput {
	return i.ToResourceArrayOutputWithContext(context.Background())
}

func (i ResourceArray) ToResourceArrayOutputWithContext(ctx context.Context) ResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceArrayOutput)
}

type ResourceOutput struct{ *pulumi.OutputState }

func (ResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Resource)(nil)).Elem()
}

func (o ResourceOutput) ToResourceOutput() ResourceOutput {
	return o
}

func (o ResourceOutput) ToResourceOutputWithContext(ctx context.Context) ResourceOutput {
	return o
}

// Default 1m. The interval on which to check for new versions of the resource. Acceptable interval options are defined by the time.ParseDuration function. If set to never the resource will not be automatically checked. The resource can still be checked manually via the web UI, fly, or webhooks.
func (o ResourceOutput) CheckEvery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Resource) *string { return v.CheckEvery }).(pulumi.StringPtrOutput)
}

// The name of the resource. This should be short and simple. This name will be referenced by build plans of jobs in the pipeline.
func (o ResourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Resource) string { return v.Name }).(pulumi.StringOutput)
}

// Default false. If set to true, the metadata for each version of the resource will be viewable by unauthenticated users (assuming the pipeline has been exposed).
func (o ResourceOutput) Public() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Resource) *bool { return v.Public }).(pulumi.BoolPtrOutput)
}

// The configuration for the resource. This varies by resource type, and is a black box to Concourse; it is blindly passed to the resource at runtime.
func (o ResourceOutput) Source() pulumi.StringMapOutput {
	return o.ApplyT(func(v Resource) map[string]string { return v.Source }).(pulumi.StringMapOutput)
}

// Default []. A list of tags to determine which workers the checks will be performed on. You'll want to specify this if the source is internal to a worker's network, for example.
func (o ResourceOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Resource) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The resource type implementing the resource.
func (o ResourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Resource) string { return v.Type }).(pulumi.StringOutput)
}

// If specified, web hooks can be sent to trigger an immediate check of the resource, specifying this value as a primitive form of authentication via query params.
func (o ResourceOutput) WebhookToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Resource) *string { return v.WebhookToken }).(pulumi.StringPtrOutput)
}

type ResourceArrayOutput struct{ *pulumi.OutputState }

func (ResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Resource)(nil)).Elem()
}

func (o ResourceArrayOutput) ToResourceArrayOutput() ResourceArrayOutput {
	return o
}

func (o ResourceArrayOutput) ToResourceArrayOutputWithContext(ctx context.Context) ResourceArrayOutput {
	return o
}

func (o ResourceArrayOutput) Index(i pulumi.IntInput) ResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Resource {
		return vs[0].([]Resource)[vs[1].(int)]
	}).(ResourceOutput)
}

type ResourceType struct {
	// Default 1m. The interval on which to check for new versions of the resource. Acceptable interval options are defined by the time.ParseDuration function. If set to never the resource will not be automatically checked. The resource can still be checked manually via the web UI, fly, or webhooks.
	CheckEvery *string `pulumi:"checkEvery"`
	// The default configuration for the resource type. This varies by resource type, and is a black box to Concourse; it is merged with (duplicate fields are overwritten by) resource.source and passed to the resource at runtime.
	Defaults map[string]string `pulumi:"defaults"`
	// TThe name of the resource type. This should be short and simple. This name will be referenced by pipeline.resources defined within the same pipeline, and task.image_resources used by tasks running in the pipeline.
	Name *string `pulumi:"name"`
	// Arbitrary config to pass when running the get to fetch the resource type's image.
	Params map[string]string `pulumi:"params"`
	// Default false. If set to true, the resource's containers will be run with full capabilities, as determined by the worker backend the task runs on.
	Privileged *bool `pulumi:"privileged"`
	// The configuration for the resource. This varies by resource type, and is a black box to Concourse; it is blindly passed to the resource at runtime.
	Source map[string]string `pulumi:"source"`
	// Default []. A list of tags to determine which workers the checks will be performed on. You'll want to specify this if the source is internal to a worker's network, for example.
	Tags []string `pulumi:"tags"`
	// The resource type implementing the resource.
	Type *string `pulumi:"type"`
}

// ResourceTypeInput is an input type that accepts ResourceTypeArgs and ResourceTypeOutput values.
// You can construct a concrete instance of `ResourceTypeInput` via:
//
//          ResourceTypeArgs{...}
type ResourceTypeInput interface {
	pulumi.Input

	ToResourceTypeOutput() ResourceTypeOutput
	ToResourceTypeOutputWithContext(context.Context) ResourceTypeOutput
}

type ResourceTypeArgs struct {
	// Default 1m. The interval on which to check for new versions of the resource. Acceptable interval options are defined by the time.ParseDuration function. If set to never the resource will not be automatically checked. The resource can still be checked manually via the web UI, fly, or webhooks.
	CheckEvery pulumi.StringPtrInput `pulumi:"checkEvery"`
	// The default configuration for the resource type. This varies by resource type, and is a black box to Concourse; it is merged with (duplicate fields are overwritten by) resource.source and passed to the resource at runtime.
	Defaults pulumi.StringMapInput `pulumi:"defaults"`
	// TThe name of the resource type. This should be short and simple. This name will be referenced by pipeline.resources defined within the same pipeline, and task.image_resources used by tasks running in the pipeline.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Arbitrary config to pass when running the get to fetch the resource type's image.
	Params pulumi.StringMapInput `pulumi:"params"`
	// Default false. If set to true, the resource's containers will be run with full capabilities, as determined by the worker backend the task runs on.
	Privileged pulumi.BoolPtrInput `pulumi:"privileged"`
	// The configuration for the resource. This varies by resource type, and is a black box to Concourse; it is blindly passed to the resource at runtime.
	Source pulumi.StringMapInput `pulumi:"source"`
	// Default []. A list of tags to determine which workers the checks will be performed on. You'll want to specify this if the source is internal to a worker's network, for example.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// The resource type implementing the resource.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ResourceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceType)(nil)).Elem()
}

func (i ResourceTypeArgs) ToResourceTypeOutput() ResourceTypeOutput {
	return i.ToResourceTypeOutputWithContext(context.Background())
}

func (i ResourceTypeArgs) ToResourceTypeOutputWithContext(ctx context.Context) ResourceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceTypeOutput)
}

// ResourceTypeArrayInput is an input type that accepts ResourceTypeArray and ResourceTypeArrayOutput values.
// You can construct a concrete instance of `ResourceTypeArrayInput` via:
//
//          ResourceTypeArray{ ResourceTypeArgs{...} }
type ResourceTypeArrayInput interface {
	pulumi.Input

	ToResourceTypeArrayOutput() ResourceTypeArrayOutput
	ToResourceTypeArrayOutputWithContext(context.Context) ResourceTypeArrayOutput
}

type ResourceTypeArray []ResourceTypeInput

func (ResourceTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceType)(nil)).Elem()
}

func (i ResourceTypeArray) ToResourceTypeArrayOutput() ResourceTypeArrayOutput {
	return i.ToResourceTypeArrayOutputWithContext(context.Background())
}

func (i ResourceTypeArray) ToResourceTypeArrayOutputWithContext(ctx context.Context) ResourceTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceTypeArrayOutput)
}

type ResourceTypeOutput struct{ *pulumi.OutputState }

func (ResourceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceType)(nil)).Elem()
}

func (o ResourceTypeOutput) ToResourceTypeOutput() ResourceTypeOutput {
	return o
}

func (o ResourceTypeOutput) ToResourceTypeOutputWithContext(ctx context.Context) ResourceTypeOutput {
	return o
}

// Default 1m. The interval on which to check for new versions of the resource. Acceptable interval options are defined by the time.ParseDuration function. If set to never the resource will not be automatically checked. The resource can still be checked manually via the web UI, fly, or webhooks.
func (o ResourceTypeOutput) CheckEvery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceType) *string { return v.CheckEvery }).(pulumi.StringPtrOutput)
}

// The default configuration for the resource type. This varies by resource type, and is a black box to Concourse; it is merged with (duplicate fields are overwritten by) resource.source and passed to the resource at runtime.
func (o ResourceTypeOutput) Defaults() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceType) map[string]string { return v.Defaults }).(pulumi.StringMapOutput)
}

// TThe name of the resource type. This should be short and simple. This name will be referenced by pipeline.resources defined within the same pipeline, and task.image_resources used by tasks running in the pipeline.
func (o ResourceTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Arbitrary config to pass when running the get to fetch the resource type's image.
func (o ResourceTypeOutput) Params() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceType) map[string]string { return v.Params }).(pulumi.StringMapOutput)
}

// Default false. If set to true, the resource's containers will be run with full capabilities, as determined by the worker backend the task runs on.
func (o ResourceTypeOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceType) *bool { return v.Privileged }).(pulumi.BoolPtrOutput)
}

// The configuration for the resource. This varies by resource type, and is a black box to Concourse; it is blindly passed to the resource at runtime.
func (o ResourceTypeOutput) Source() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceType) map[string]string { return v.Source }).(pulumi.StringMapOutput)
}

// Default []. A list of tags to determine which workers the checks will be performed on. You'll want to specify this if the source is internal to a worker's network, for example.
func (o ResourceTypeOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceType) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The resource type implementing the resource.
func (o ResourceTypeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceType) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ResourceTypeArrayOutput struct{ *pulumi.OutputState }

func (ResourceTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceType)(nil)).Elem()
}

func (o ResourceTypeArrayOutput) ToResourceTypeArrayOutput() ResourceTypeArrayOutput {
	return o
}

func (o ResourceTypeArrayOutput) ToResourceTypeArrayOutputWithContext(ctx context.Context) ResourceTypeArrayOutput {
	return o
}

func (o ResourceTypeArrayOutput) Index(i pulumi.IntInput) ResourceTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceType {
		return vs[0].([]ResourceType)[vs[1].(int)]
	}).(ResourceTypeOutput)
}

type Step struct {
}

// StepInput is an input type that accepts StepArgs and StepOutput values.
// You can construct a concrete instance of `StepInput` via:
//
//          StepArgs{...}
type StepInput interface {
	pulumi.Input

	ToStepOutput() StepOutput
	ToStepOutputWithContext(context.Context) StepOutput
}

type StepArgs struct {
}

func (StepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Step)(nil)).Elem()
}

func (i StepArgs) ToStepOutput() StepOutput {
	return i.ToStepOutputWithContext(context.Background())
}

func (i StepArgs) ToStepOutputWithContext(ctx context.Context) StepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StepOutput)
}

func (i StepArgs) ToStepPtrOutput() StepPtrOutput {
	return i.ToStepPtrOutputWithContext(context.Background())
}

func (i StepArgs) ToStepPtrOutputWithContext(ctx context.Context) StepPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StepOutput).ToStepPtrOutputWithContext(ctx)
}

// StepPtrInput is an input type that accepts StepArgs, StepPtr and StepPtrOutput values.
// You can construct a concrete instance of `StepPtrInput` via:
//
//          StepArgs{...}
//
//  or:
//
//          nil
type StepPtrInput interface {
	pulumi.Input

	ToStepPtrOutput() StepPtrOutput
	ToStepPtrOutputWithContext(context.Context) StepPtrOutput
}

type stepPtrType StepArgs

func StepPtr(v *StepArgs) StepPtrInput {
	return (*stepPtrType)(v)
}

func (*stepPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Step)(nil)).Elem()
}

func (i *stepPtrType) ToStepPtrOutput() StepPtrOutput {
	return i.ToStepPtrOutputWithContext(context.Background())
}

func (i *stepPtrType) ToStepPtrOutputWithContext(ctx context.Context) StepPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StepPtrOutput)
}

// StepArrayInput is an input type that accepts StepArray and StepArrayOutput values.
// You can construct a concrete instance of `StepArrayInput` via:
//
//          StepArray{ StepArgs{...} }
type StepArrayInput interface {
	pulumi.Input

	ToStepArrayOutput() StepArrayOutput
	ToStepArrayOutputWithContext(context.Context) StepArrayOutput
}

type StepArray []StepInput

func (StepArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Step)(nil)).Elem()
}

func (i StepArray) ToStepArrayOutput() StepArrayOutput {
	return i.ToStepArrayOutputWithContext(context.Background())
}

func (i StepArray) ToStepArrayOutputWithContext(ctx context.Context) StepArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StepArrayOutput)
}

type StepOutput struct{ *pulumi.OutputState }

func (StepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Step)(nil)).Elem()
}

func (o StepOutput) ToStepOutput() StepOutput {
	return o
}

func (o StepOutput) ToStepOutputWithContext(ctx context.Context) StepOutput {
	return o
}

func (o StepOutput) ToStepPtrOutput() StepPtrOutput {
	return o.ToStepPtrOutputWithContext(context.Background())
}

func (o StepOutput) ToStepPtrOutputWithContext(ctx context.Context) StepPtrOutput {
	return o.ApplyT(func(v Step) *Step {
		return &v
	}).(StepPtrOutput)
}

type StepPtrOutput struct{ *pulumi.OutputState }

func (StepPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Step)(nil)).Elem()
}

func (o StepPtrOutput) ToStepPtrOutput() StepPtrOutput {
	return o
}

func (o StepPtrOutput) ToStepPtrOutputWithContext(ctx context.Context) StepPtrOutput {
	return o
}

func (o StepPtrOutput) Elem() StepOutput {
	return o.ApplyT(func(v *Step) Step { return *v }).(StepOutput)
}

type StepArrayOutput struct{ *pulumi.OutputState }

func (StepArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Step)(nil)).Elem()
}

func (o StepArrayOutput) ToStepArrayOutput() StepArrayOutput {
	return o
}

func (o StepArrayOutput) ToStepArrayOutputWithContext(ctx context.Context) StepArrayOutput {
	return o
}

func (o StepArrayOutput) Index(i pulumi.IntInput) StepOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Step {
		return vs[0].([]Step)[vs[1].(int)]
	}).(StepOutput)
}

type Task struct {
	Task string `pulumi:"task"`
}

// TaskInput is an input type that accepts TaskArgs and TaskOutput values.
// You can construct a concrete instance of `TaskInput` via:
//
//          TaskArgs{...}
type TaskInput interface {
	pulumi.Input

	ToTaskOutput() TaskOutput
	ToTaskOutputWithContext(context.Context) TaskOutput
}

type TaskArgs struct {
	Task pulumi.StringInput `pulumi:"task"`
}

func (TaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Task)(nil)).Elem()
}

func (i TaskArgs) ToTaskOutput() TaskOutput {
	return i.ToTaskOutputWithContext(context.Background())
}

func (i TaskArgs) ToTaskOutputWithContext(ctx context.Context) TaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskOutput)
}

type TaskOutput struct{ *pulumi.OutputState }

func (TaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Task)(nil)).Elem()
}

func (o TaskOutput) ToTaskOutput() TaskOutput {
	return o
}

func (o TaskOutput) ToTaskOutputWithContext(ctx context.Context) TaskOutput {
	return o
}

func (o TaskOutput) Task() pulumi.StringOutput {
	return o.ApplyT(func(v Task) string { return v.Task }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GroupOutput{})
	pulumi.RegisterOutputType(GroupArrayOutput{})
	pulumi.RegisterOutputType(JobOutput{})
	pulumi.RegisterOutputType(JobArrayOutput{})
	pulumi.RegisterOutputType(ResourceOutput{})
	pulumi.RegisterOutputType(ResourceArrayOutput{})
	pulumi.RegisterOutputType(ResourceTypeOutput{})
	pulumi.RegisterOutputType(ResourceTypeArrayOutput{})
	pulumi.RegisterOutputType(StepOutput{})
	pulumi.RegisterOutputType(StepPtrOutput{})
	pulumi.RegisterOutputType(StepArrayOutput{})
	pulumi.RegisterOutputType(TaskOutput{})
}
