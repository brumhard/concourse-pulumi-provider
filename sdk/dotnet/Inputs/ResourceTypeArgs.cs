// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Concourse.Inputs
{

    public sealed class ResourceTypeArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Default 1m. The interval on which to check for new versions of the resource. Acceptable interval options are defined by the time.ParseDuration function. If set to never the resource will not be automatically checked. The resource can still be checked manually via the web UI, fly, or webhooks.
        /// </summary>
        [Input("checkEvery")]
        public Input<string>? CheckEvery { get; set; }

        [Input("defaults")]
        private InputMap<string>? _defaults;

        /// <summary>
        /// The default configuration for the resource type. This varies by resource type, and is a black box to Concourse; it is merged with (duplicate fields are overwritten by) resource.source and passed to the resource at runtime.
        /// </summary>
        public InputMap<string> Defaults
        {
            get => _defaults ?? (_defaults = new InputMap<string>());
            set => _defaults = value;
        }

        /// <summary>
        /// TThe name of the resource type. This should be short and simple. This name will be referenced by pipeline.resources defined within the same pipeline, and task.image_resources used by tasks running in the pipeline.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("params")]
        private InputMap<string>? _params;

        /// <summary>
        /// Arbitrary config to pass when running the get to fetch the resource type's image.
        /// </summary>
        public InputMap<string> Params
        {
            get => _params ?? (_params = new InputMap<string>());
            set => _params = value;
        }

        /// <summary>
        /// Default false. If set to true, the resource's containers will be run with full capabilities, as determined by the worker backend the task runs on.
        /// </summary>
        [Input("privileged")]
        public Input<bool>? Privileged { get; set; }

        [Input("source")]
        private InputMap<string>? _source;

        /// <summary>
        /// The configuration for the resource. This varies by resource type, and is a black box to Concourse; it is blindly passed to the resource at runtime.
        /// </summary>
        public InputMap<string> Source
        {
            get => _source ?? (_source = new InputMap<string>());
            set => _source = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Default []. A list of tags to determine which workers the checks will be performed on. You'll want to specify this if the source is internal to a worker's network, for example.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The resource type implementing the resource.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public ResourceTypeArgs()
        {
        }
    }
}
