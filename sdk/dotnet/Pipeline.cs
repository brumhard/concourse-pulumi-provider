// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Concourse
{
    [ConcourseResourceType("concourse:index:Pipeline")]
    public partial class Pipeline : Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the pipeline.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a Pipeline resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Pipeline(string name, PipelineArgs args, CustomResourceOptions? options = null)
            : base("concourse:index:Pipeline", name, args ?? new PipelineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Pipeline(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("concourse:index:Pipeline", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Pipeline resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Pipeline Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Pipeline(name, id, options);
        }
    }

    public sealed class PipelineArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Visual configurations for personalizing your pipeline.
        /// </summary>
        [Input("display")]
        public Input<Inputs.DisplayOptionsArgs>? Display { get; set; }

        [Input("groups")]
        private InputList<Inputs.GroupArgs>? _groups;

        /// <summary>
        /// A list of job groups to use for organizing jobs in the web UI. Groups have no functional effect on your pipeline. They are purely for making it easier to grok large pipelines in the web UI.
        /// </summary>
        public InputList<Inputs.GroupArgs> Groups
        {
            get => _groups ?? (_groups = new InputList<Inputs.GroupArgs>());
            set => _groups = value;
        }

        [Input("jobs", required: true)]
        private InputList<Inputs.JobArgs>? _jobs;

        /// <summary>
        /// A set of jobs for the pipeline to continuously schedule. At least one job is required for a pipeline to be valid.
        /// </summary>
        public InputList<Inputs.JobArgs> Jobs
        {
            get => _jobs ?? (_jobs = new InputList<Inputs.JobArgs>());
            set => _jobs = value;
        }

        [Input("resourceTypes")]
        private InputList<Inputs.ResourceTypeArgs>? _resourceTypes;

        /// <summary>
        /// A set of resource types for resources within the pipeline to use.
        /// </summary>
        public InputList<Inputs.ResourceTypeArgs> ResourceTypes
        {
            get => _resourceTypes ?? (_resourceTypes = new InputList<Inputs.ResourceTypeArgs>());
            set => _resourceTypes = value;
        }

        [Input("resources")]
        private InputList<Inputs.ResourceArgs>? _resources;

        /// <summary>
        /// A set of resources for the pipeline to continuously check.
        /// </summary>
        public InputList<Inputs.ResourceArgs> Resources
        {
            get => _resources ?? (_resources = new InputList<Inputs.ResourceArgs>());
            set => _resources = value;
        }

        public PipelineArgs()
        {
        }
    }
}
