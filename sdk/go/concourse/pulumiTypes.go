// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package concourse

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AnonymousResource struct {
	Params map[string]string `pulumi:"params"`
	Source map[string]string `pulumi:"source"`
	Type   string            `pulumi:"type"`
}

// AnonymousResourceInput is an input type that accepts AnonymousResourceArgs and AnonymousResourceOutput values.
// You can construct a concrete instance of `AnonymousResourceInput` via:
//
//          AnonymousResourceArgs{...}
type AnonymousResourceInput interface {
	pulumi.Input

	ToAnonymousResourceOutput() AnonymousResourceOutput
	ToAnonymousResourceOutputWithContext(context.Context) AnonymousResourceOutput
}

type AnonymousResourceArgs struct {
	Params pulumi.StringMapInput `pulumi:"params"`
	Source pulumi.StringMapInput `pulumi:"source"`
	Type   pulumi.StringInput    `pulumi:"type"`
}

func (AnonymousResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnonymousResource)(nil)).Elem()
}

func (i AnonymousResourceArgs) ToAnonymousResourceOutput() AnonymousResourceOutput {
	return i.ToAnonymousResourceOutputWithContext(context.Background())
}

func (i AnonymousResourceArgs) ToAnonymousResourceOutputWithContext(ctx context.Context) AnonymousResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnonymousResourceOutput)
}

func (i AnonymousResourceArgs) ToAnonymousResourcePtrOutput() AnonymousResourcePtrOutput {
	return i.ToAnonymousResourcePtrOutputWithContext(context.Background())
}

func (i AnonymousResourceArgs) ToAnonymousResourcePtrOutputWithContext(ctx context.Context) AnonymousResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnonymousResourceOutput).ToAnonymousResourcePtrOutputWithContext(ctx)
}

// AnonymousResourcePtrInput is an input type that accepts AnonymousResourceArgs, AnonymousResourcePtr and AnonymousResourcePtrOutput values.
// You can construct a concrete instance of `AnonymousResourcePtrInput` via:
//
//          AnonymousResourceArgs{...}
//
//  or:
//
//          nil
type AnonymousResourcePtrInput interface {
	pulumi.Input

	ToAnonymousResourcePtrOutput() AnonymousResourcePtrOutput
	ToAnonymousResourcePtrOutputWithContext(context.Context) AnonymousResourcePtrOutput
}

type anonymousResourcePtrType AnonymousResourceArgs

func AnonymousResourcePtr(v *AnonymousResourceArgs) AnonymousResourcePtrInput {
	return (*anonymousResourcePtrType)(v)
}

func (*anonymousResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnonymousResource)(nil)).Elem()
}

func (i *anonymousResourcePtrType) ToAnonymousResourcePtrOutput() AnonymousResourcePtrOutput {
	return i.ToAnonymousResourcePtrOutputWithContext(context.Background())
}

func (i *anonymousResourcePtrType) ToAnonymousResourcePtrOutputWithContext(ctx context.Context) AnonymousResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnonymousResourcePtrOutput)
}

type AnonymousResourceOutput struct{ *pulumi.OutputState }

func (AnonymousResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnonymousResource)(nil)).Elem()
}

func (o AnonymousResourceOutput) ToAnonymousResourceOutput() AnonymousResourceOutput {
	return o
}

func (o AnonymousResourceOutput) ToAnonymousResourceOutputWithContext(ctx context.Context) AnonymousResourceOutput {
	return o
}

func (o AnonymousResourceOutput) ToAnonymousResourcePtrOutput() AnonymousResourcePtrOutput {
	return o.ToAnonymousResourcePtrOutputWithContext(context.Background())
}

func (o AnonymousResourceOutput) ToAnonymousResourcePtrOutputWithContext(ctx context.Context) AnonymousResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnonymousResource) *AnonymousResource {
		return &v
	}).(AnonymousResourcePtrOutput)
}

func (o AnonymousResourceOutput) Params() pulumi.StringMapOutput {
	return o.ApplyT(func(v AnonymousResource) map[string]string { return v.Params }).(pulumi.StringMapOutput)
}

func (o AnonymousResourceOutput) Source() pulumi.StringMapOutput {
	return o.ApplyT(func(v AnonymousResource) map[string]string { return v.Source }).(pulumi.StringMapOutput)
}

func (o AnonymousResourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AnonymousResource) string { return v.Type }).(pulumi.StringOutput)
}

type AnonymousResourcePtrOutput struct{ *pulumi.OutputState }

func (AnonymousResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnonymousResource)(nil)).Elem()
}

func (o AnonymousResourcePtrOutput) ToAnonymousResourcePtrOutput() AnonymousResourcePtrOutput {
	return o
}

func (o AnonymousResourcePtrOutput) ToAnonymousResourcePtrOutputWithContext(ctx context.Context) AnonymousResourcePtrOutput {
	return o
}

func (o AnonymousResourcePtrOutput) Elem() AnonymousResourceOutput {
	return o.ApplyT(func(v *AnonymousResource) AnonymousResource {
		if v != nil {
			return *v
		}
		var ret AnonymousResource
		return ret
	}).(AnonymousResourceOutput)
}

func (o AnonymousResourcePtrOutput) Params() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AnonymousResource) map[string]string {
		if v == nil {
			return nil
		}
		return v.Params
	}).(pulumi.StringMapOutput)
}

func (o AnonymousResourcePtrOutput) Source() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AnonymousResource) map[string]string {
		if v == nil {
			return nil
		}
		return v.Source
	}).(pulumi.StringMapOutput)
}

func (o AnonymousResourcePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnonymousResource) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type DisplayOptions struct {
	// Allows users to specify a custom background image which is put at 30% opacity, grayscaled and blended into existing background. Must be an http, https, or relative URL.
	Background_image *string `pulumi:"background_image"`
}

// DisplayOptionsInput is an input type that accepts DisplayOptionsArgs and DisplayOptionsOutput values.
// You can construct a concrete instance of `DisplayOptionsInput` via:
//
//          DisplayOptionsArgs{...}
type DisplayOptionsInput interface {
	pulumi.Input

	ToDisplayOptionsOutput() DisplayOptionsOutput
	ToDisplayOptionsOutputWithContext(context.Context) DisplayOptionsOutput
}

type DisplayOptionsArgs struct {
	// Allows users to specify a custom background image which is put at 30% opacity, grayscaled and blended into existing background. Must be an http, https, or relative URL.
	Background_image pulumi.StringPtrInput `pulumi:"background_image"`
}

func (DisplayOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DisplayOptions)(nil)).Elem()
}

func (i DisplayOptionsArgs) ToDisplayOptionsOutput() DisplayOptionsOutput {
	return i.ToDisplayOptionsOutputWithContext(context.Background())
}

func (i DisplayOptionsArgs) ToDisplayOptionsOutputWithContext(ctx context.Context) DisplayOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DisplayOptionsOutput)
}

func (i DisplayOptionsArgs) ToDisplayOptionsPtrOutput() DisplayOptionsPtrOutput {
	return i.ToDisplayOptionsPtrOutputWithContext(context.Background())
}

func (i DisplayOptionsArgs) ToDisplayOptionsPtrOutputWithContext(ctx context.Context) DisplayOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DisplayOptionsOutput).ToDisplayOptionsPtrOutputWithContext(ctx)
}

// DisplayOptionsPtrInput is an input type that accepts DisplayOptionsArgs, DisplayOptionsPtr and DisplayOptionsPtrOutput values.
// You can construct a concrete instance of `DisplayOptionsPtrInput` via:
//
//          DisplayOptionsArgs{...}
//
//  or:
//
//          nil
type DisplayOptionsPtrInput interface {
	pulumi.Input

	ToDisplayOptionsPtrOutput() DisplayOptionsPtrOutput
	ToDisplayOptionsPtrOutputWithContext(context.Context) DisplayOptionsPtrOutput
}

type displayOptionsPtrType DisplayOptionsArgs

func DisplayOptionsPtr(v *DisplayOptionsArgs) DisplayOptionsPtrInput {
	return (*displayOptionsPtrType)(v)
}

func (*displayOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DisplayOptions)(nil)).Elem()
}

func (i *displayOptionsPtrType) ToDisplayOptionsPtrOutput() DisplayOptionsPtrOutput {
	return i.ToDisplayOptionsPtrOutputWithContext(context.Background())
}

func (i *displayOptionsPtrType) ToDisplayOptionsPtrOutputWithContext(ctx context.Context) DisplayOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DisplayOptionsPtrOutput)
}

type DisplayOptionsOutput struct{ *pulumi.OutputState }

func (DisplayOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DisplayOptions)(nil)).Elem()
}

func (o DisplayOptionsOutput) ToDisplayOptionsOutput() DisplayOptionsOutput {
	return o
}

func (o DisplayOptionsOutput) ToDisplayOptionsOutputWithContext(ctx context.Context) DisplayOptionsOutput {
	return o
}

func (o DisplayOptionsOutput) ToDisplayOptionsPtrOutput() DisplayOptionsPtrOutput {
	return o.ToDisplayOptionsPtrOutputWithContext(context.Background())
}

func (o DisplayOptionsOutput) ToDisplayOptionsPtrOutputWithContext(ctx context.Context) DisplayOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DisplayOptions) *DisplayOptions {
		return &v
	}).(DisplayOptionsPtrOutput)
}

// Allows users to specify a custom background image which is put at 30% opacity, grayscaled and blended into existing background. Must be an http, https, or relative URL.
func (o DisplayOptionsOutput) Background_image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DisplayOptions) *string { return v.Background_image }).(pulumi.StringPtrOutput)
}

type DisplayOptionsPtrOutput struct{ *pulumi.OutputState }

func (DisplayOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DisplayOptions)(nil)).Elem()
}

func (o DisplayOptionsPtrOutput) ToDisplayOptionsPtrOutput() DisplayOptionsPtrOutput {
	return o
}

func (o DisplayOptionsPtrOutput) ToDisplayOptionsPtrOutputWithContext(ctx context.Context) DisplayOptionsPtrOutput {
	return o
}

func (o DisplayOptionsPtrOutput) Elem() DisplayOptionsOutput {
	return o.ApplyT(func(v *DisplayOptions) DisplayOptions {
		if v != nil {
			return *v
		}
		var ret DisplayOptions
		return ret
	}).(DisplayOptionsOutput)
}

// Allows users to specify a custom background image which is put at 30% opacity, grayscaled and blended into existing background. Must be an http, https, or relative URL.
func (o DisplayOptionsPtrOutput) Background_image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DisplayOptions) *string {
		if v == nil {
			return nil
		}
		return v.Background_image
	}).(pulumi.StringPtrOutput)
}

type GetStep struct {
	Get      string            `pulumi:"get"`
	Params   map[string]string `pulumi:"params"`
	Passed   []string          `pulumi:"passed"`
	Resource *string           `pulumi:"resource"`
	Trigger  *bool             `pulumi:"trigger"`
}

// GetStepInput is an input type that accepts GetStepArgs and GetStepOutput values.
// You can construct a concrete instance of `GetStepInput` via:
//
//          GetStepArgs{...}
type GetStepInput interface {
	pulumi.Input

	ToGetStepOutput() GetStepOutput
	ToGetStepOutputWithContext(context.Context) GetStepOutput
}

type GetStepArgs struct {
	Get      pulumi.StringInput      `pulumi:"get"`
	Params   pulumi.StringMapInput   `pulumi:"params"`
	Passed   pulumi.StringArrayInput `pulumi:"passed"`
	Resource pulumi.StringPtrInput   `pulumi:"resource"`
	Trigger  pulumi.BoolPtrInput     `pulumi:"trigger"`
}

func (GetStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStep)(nil)).Elem()
}

func (i GetStepArgs) ToGetStepOutput() GetStepOutput {
	return i.ToGetStepOutputWithContext(context.Background())
}

func (i GetStepArgs) ToGetStepOutputWithContext(ctx context.Context) GetStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStepOutput)
}

type GetStepOutput struct{ *pulumi.OutputState }

func (GetStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStep)(nil)).Elem()
}

func (o GetStepOutput) ToGetStepOutput() GetStepOutput {
	return o
}

func (o GetStepOutput) ToGetStepOutputWithContext(ctx context.Context) GetStepOutput {
	return o
}

func (o GetStepOutput) Get() pulumi.StringOutput {
	return o.ApplyT(func(v GetStep) string { return v.Get }).(pulumi.StringOutput)
}

func (o GetStepOutput) Params() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetStep) map[string]string { return v.Params }).(pulumi.StringMapOutput)
}

func (o GetStepOutput) Passed() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetStep) []string { return v.Passed }).(pulumi.StringArrayOutput)
}

func (o GetStepOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetStep) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

func (o GetStepOutput) Trigger() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetStep) *bool { return v.Trigger }).(pulumi.BoolPtrOutput)
}

type Group struct {
	// A list of jobs that should appear in this group. A job may appear in multiple groups. Neighbours of jobs in the current group will also appear on the same page in order to give context of the location of the group in the pipeline. You may also use any valid glob to represent several jobs.
	Jobs []string `pulumi:"jobs"`
	// A unique name for the group. This should be short and simple as it will be used as the tab name for navigation.
	Name string `pulumi:"name"`
}

// GroupInput is an input type that accepts GroupArgs and GroupOutput values.
// You can construct a concrete instance of `GroupInput` via:
//
//          GroupArgs{...}
type GroupInput interface {
	pulumi.Input

	ToGroupOutput() GroupOutput
	ToGroupOutputWithContext(context.Context) GroupOutput
}

type GroupArgs struct {
	// A list of jobs that should appear in this group. A job may appear in multiple groups. Neighbours of jobs in the current group will also appear on the same page in order to give context of the location of the group in the pipeline. You may also use any valid glob to represent several jobs.
	Jobs pulumi.StringArrayInput `pulumi:"jobs"`
	// A unique name for the group. This should be short and simple as it will be used as the tab name for navigation.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Group)(nil)).Elem()
}

func (i GroupArgs) ToGroupOutput() GroupOutput {
	return i.ToGroupOutputWithContext(context.Background())
}

func (i GroupArgs) ToGroupOutputWithContext(ctx context.Context) GroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupOutput)
}

// GroupArrayInput is an input type that accepts GroupArray and GroupArrayOutput values.
// You can construct a concrete instance of `GroupArrayInput` via:
//
//          GroupArray{ GroupArgs{...} }
type GroupArrayInput interface {
	pulumi.Input

	ToGroupArrayOutput() GroupArrayOutput
	ToGroupArrayOutputWithContext(context.Context) GroupArrayOutput
}

type GroupArray []GroupInput

func (GroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Group)(nil)).Elem()
}

func (i GroupArray) ToGroupArrayOutput() GroupArrayOutput {
	return i.ToGroupArrayOutputWithContext(context.Background())
}

func (i GroupArray) ToGroupArrayOutputWithContext(ctx context.Context) GroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupArrayOutput)
}

type GroupOutput struct{ *pulumi.OutputState }

func (GroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Group)(nil)).Elem()
}

func (o GroupOutput) ToGroupOutput() GroupOutput {
	return o
}

func (o GroupOutput) ToGroupOutputWithContext(ctx context.Context) GroupOutput {
	return o
}

// A list of jobs that should appear in this group. A job may appear in multiple groups. Neighbours of jobs in the current group will also appear on the same page in order to give context of the location of the group in the pipeline. You may also use any valid glob to represent several jobs.
func (o GroupOutput) Jobs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Group) []string { return v.Jobs }).(pulumi.StringArrayOutput)
}

// A unique name for the group. This should be short and simple as it will be used as the tab name for navigation.
func (o GroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Group) string { return v.Name }).(pulumi.StringOutput)
}

type GroupArrayOutput struct{ *pulumi.OutputState }

func (GroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Group)(nil)).Elem()
}

func (o GroupArrayOutput) ToGroupArrayOutput() GroupArrayOutput {
	return o
}

func (o GroupArrayOutput) ToGroupArrayOutputWithContext(ctx context.Context) GroupArrayOutput {
	return o
}

func (o GroupArrayOutput) Index(i pulumi.IntInput) GroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Group {
		return vs[0].([]Group)[vs[1].(int)]
	}).(GroupOutput)
}

type InParallelConfig struct {
	Fail_fast *bool         `pulumi:"fail_fast"`
	Limit     *float64      `pulumi:"limit"`
	Steps     []interface{} `pulumi:"steps"`
}

// InParallelConfigInput is an input type that accepts InParallelConfigArgs and InParallelConfigOutput values.
// You can construct a concrete instance of `InParallelConfigInput` via:
//
//          InParallelConfigArgs{...}
type InParallelConfigInput interface {
	pulumi.Input

	ToInParallelConfigOutput() InParallelConfigOutput
	ToInParallelConfigOutputWithContext(context.Context) InParallelConfigOutput
}

type InParallelConfigArgs struct {
	Fail_fast pulumi.BoolPtrInput    `pulumi:"fail_fast"`
	Limit     pulumi.Float64PtrInput `pulumi:"limit"`
	Steps     pulumi.ArrayInput      `pulumi:"steps"`
}

func (InParallelConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InParallelConfig)(nil)).Elem()
}

func (i InParallelConfigArgs) ToInParallelConfigOutput() InParallelConfigOutput {
	return i.ToInParallelConfigOutputWithContext(context.Background())
}

func (i InParallelConfigArgs) ToInParallelConfigOutputWithContext(ctx context.Context) InParallelConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InParallelConfigOutput)
}

type InParallelConfigOutput struct{ *pulumi.OutputState }

func (InParallelConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InParallelConfig)(nil)).Elem()
}

func (o InParallelConfigOutput) ToInParallelConfigOutput() InParallelConfigOutput {
	return o
}

func (o InParallelConfigOutput) ToInParallelConfigOutputWithContext(ctx context.Context) InParallelConfigOutput {
	return o
}

func (o InParallelConfigOutput) Fail_fast() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InParallelConfig) *bool { return v.Fail_fast }).(pulumi.BoolPtrOutput)
}

func (o InParallelConfigOutput) Limit() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v InParallelConfig) *float64 { return v.Limit }).(pulumi.Float64PtrOutput)
}

func (o InParallelConfigOutput) Steps() pulumi.ArrayOutput {
	return o.ApplyT(func(v InParallelConfig) []interface{} { return v.Steps }).(pulumi.ArrayOutput)
}

type InParallelStep struct {
	In_parallel InParallelConfig `pulumi:"in_parallel"`
}

// InParallelStepInput is an input type that accepts InParallelStepArgs and InParallelStepOutput values.
// You can construct a concrete instance of `InParallelStepInput` via:
//
//          InParallelStepArgs{...}
type InParallelStepInput interface {
	pulumi.Input

	ToInParallelStepOutput() InParallelStepOutput
	ToInParallelStepOutputWithContext(context.Context) InParallelStepOutput
}

type InParallelStepArgs struct {
	In_parallel InParallelConfigInput `pulumi:"in_parallel"`
}

func (InParallelStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InParallelStep)(nil)).Elem()
}

func (i InParallelStepArgs) ToInParallelStepOutput() InParallelStepOutput {
	return i.ToInParallelStepOutputWithContext(context.Background())
}

func (i InParallelStepArgs) ToInParallelStepOutputWithContext(ctx context.Context) InParallelStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InParallelStepOutput)
}

type InParallelStepOutput struct{ *pulumi.OutputState }

func (InParallelStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InParallelStep)(nil)).Elem()
}

func (o InParallelStepOutput) ToInParallelStepOutput() InParallelStepOutput {
	return o
}

func (o InParallelStepOutput) ToInParallelStepOutputWithContext(ctx context.Context) InParallelStepOutput {
	return o
}

func (o InParallelStepOutput) In_parallel() InParallelConfigOutput {
	return o.ApplyT(func(v InParallelStep) InParallelConfig { return v.In_parallel }).(InParallelConfigOutput)
}

type Job struct {
	// Step to execute regardless of whether the job succeeds, fails, errors, or aborts.
	Ensure interface{} `pulumi:"ensure"`
	// If set, specifies a maximum number of builds to run at a time. If serial or serial_groups are set, they take precedence and force this value to be 1.
	Max_in_flight *float64 `pulumi:"max_in_flight"`
	// The name of the job. This should be short; it will show up in URLs.
	Name string `pulumi:"name"`
	// Step to execute when the job aborts.
	On_abort interface{} `pulumi:"on_abort"`
	// Step to execute when the job errors.
	On_error interface{} `pulumi:"on_error"`
	// Step to execute when the job fails.
	On_failure interface{} `pulumi:"on_failure"`
	// Step to execute when the job succeeds.
	On_success interface{}   `pulumi:"on_success"`
	Plan       []interface{} `pulumi:"plan"`
	// Default false. If set to true, the build log of this job will be viewable by unauthenticated users. Unauthenticated users will always be able to see the inputs, outputs, and build status history of a job. This is useful if you would like to expose your pipeline publicly without showing sensitive information in the build log.
	Public *bool `pulumi:"public"`
	// Default false. If set to true, builds will queue up and execute one-by-one, rather than executing in parallel.
	Serial *bool `pulumi:"serial"`
}

// JobInput is an input type that accepts JobArgs and JobOutput values.
// You can construct a concrete instance of `JobInput` via:
//
//          JobArgs{...}
type JobInput interface {
	pulumi.Input

	ToJobOutput() JobOutput
	ToJobOutputWithContext(context.Context) JobOutput
}

type JobArgs struct {
	// Step to execute regardless of whether the job succeeds, fails, errors, or aborts.
	Ensure pulumi.Input `pulumi:"ensure"`
	// If set, specifies a maximum number of builds to run at a time. If serial or serial_groups are set, they take precedence and force this value to be 1.
	Max_in_flight pulumi.Float64PtrInput `pulumi:"max_in_flight"`
	// The name of the job. This should be short; it will show up in URLs.
	Name pulumi.StringInput `pulumi:"name"`
	// Step to execute when the job aborts.
	On_abort pulumi.Input `pulumi:"on_abort"`
	// Step to execute when the job errors.
	On_error pulumi.Input `pulumi:"on_error"`
	// Step to execute when the job fails.
	On_failure pulumi.Input `pulumi:"on_failure"`
	// Step to execute when the job succeeds.
	On_success pulumi.Input      `pulumi:"on_success"`
	Plan       pulumi.ArrayInput `pulumi:"plan"`
	// Default false. If set to true, the build log of this job will be viewable by unauthenticated users. Unauthenticated users will always be able to see the inputs, outputs, and build status history of a job. This is useful if you would like to expose your pipeline publicly without showing sensitive information in the build log.
	Public pulumi.BoolPtrInput `pulumi:"public"`
	// Default false. If set to true, builds will queue up and execute one-by-one, rather than executing in parallel.
	Serial pulumi.BoolPtrInput `pulumi:"serial"`
}

func (JobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Job)(nil)).Elem()
}

func (i JobArgs) ToJobOutput() JobOutput {
	return i.ToJobOutputWithContext(context.Background())
}

func (i JobArgs) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutput)
}

// JobArrayInput is an input type that accepts JobArray and JobArrayOutput values.
// You can construct a concrete instance of `JobArrayInput` via:
//
//          JobArray{ JobArgs{...} }
type JobArrayInput interface {
	pulumi.Input

	ToJobArrayOutput() JobArrayOutput
	ToJobArrayOutputWithContext(context.Context) JobArrayOutput
}

type JobArray []JobInput

func (JobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Job)(nil)).Elem()
}

func (i JobArray) ToJobArrayOutput() JobArrayOutput {
	return i.ToJobArrayOutputWithContext(context.Background())
}

func (i JobArray) ToJobArrayOutputWithContext(ctx context.Context) JobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobArrayOutput)
}

type JobOutput struct{ *pulumi.OutputState }

func (JobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Job)(nil)).Elem()
}

func (o JobOutput) ToJobOutput() JobOutput {
	return o
}

func (o JobOutput) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return o
}

// Step to execute regardless of whether the job succeeds, fails, errors, or aborts.
func (o JobOutput) Ensure() pulumi.AnyOutput {
	return o.ApplyT(func(v Job) interface{} { return v.Ensure }).(pulumi.AnyOutput)
}

// If set, specifies a maximum number of builds to run at a time. If serial or serial_groups are set, they take precedence and force this value to be 1.
func (o JobOutput) Max_in_flight() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Job) *float64 { return v.Max_in_flight }).(pulumi.Float64PtrOutput)
}

// The name of the job. This should be short; it will show up in URLs.
func (o JobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Job) string { return v.Name }).(pulumi.StringOutput)
}

// Step to execute when the job aborts.
func (o JobOutput) On_abort() pulumi.AnyOutput {
	return o.ApplyT(func(v Job) interface{} { return v.On_abort }).(pulumi.AnyOutput)
}

// Step to execute when the job errors.
func (o JobOutput) On_error() pulumi.AnyOutput {
	return o.ApplyT(func(v Job) interface{} { return v.On_error }).(pulumi.AnyOutput)
}

// Step to execute when the job fails.
func (o JobOutput) On_failure() pulumi.AnyOutput {
	return o.ApplyT(func(v Job) interface{} { return v.On_failure }).(pulumi.AnyOutput)
}

// Step to execute when the job succeeds.
func (o JobOutput) On_success() pulumi.AnyOutput {
	return o.ApplyT(func(v Job) interface{} { return v.On_success }).(pulumi.AnyOutput)
}

func (o JobOutput) Plan() pulumi.ArrayOutput {
	return o.ApplyT(func(v Job) []interface{} { return v.Plan }).(pulumi.ArrayOutput)
}

// Default false. If set to true, the build log of this job will be viewable by unauthenticated users. Unauthenticated users will always be able to see the inputs, outputs, and build status history of a job. This is useful if you would like to expose your pipeline publicly without showing sensitive information in the build log.
func (o JobOutput) Public() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Job) *bool { return v.Public }).(pulumi.BoolPtrOutput)
}

// Default false. If set to true, builds will queue up and execute one-by-one, rather than executing in parallel.
func (o JobOutput) Serial() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Job) *bool { return v.Serial }).(pulumi.BoolPtrOutput)
}

type JobArrayOutput struct{ *pulumi.OutputState }

func (JobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Job)(nil)).Elem()
}

func (o JobArrayOutput) ToJobArrayOutput() JobArrayOutput {
	return o
}

func (o JobArrayOutput) ToJobArrayOutputWithContext(ctx context.Context) JobArrayOutput {
	return o
}

func (o JobArrayOutput) Index(i pulumi.IntInput) JobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Job {
		return vs[0].([]Job)[vs[1].(int)]
	}).(JobOutput)
}

type PutStep struct {
	Get_params map[string]string `pulumi:"get_params"`
	Params     map[string]string `pulumi:"params"`
	Put        string            `pulumi:"put"`
	Resource   *string           `pulumi:"resource"`
}

// PutStepInput is an input type that accepts PutStepArgs and PutStepOutput values.
// You can construct a concrete instance of `PutStepInput` via:
//
//          PutStepArgs{...}
type PutStepInput interface {
	pulumi.Input

	ToPutStepOutput() PutStepOutput
	ToPutStepOutputWithContext(context.Context) PutStepOutput
}

type PutStepArgs struct {
	Get_params pulumi.StringMapInput `pulumi:"get_params"`
	Params     pulumi.StringMapInput `pulumi:"params"`
	Put        pulumi.StringInput    `pulumi:"put"`
	Resource   pulumi.StringPtrInput `pulumi:"resource"`
}

func (PutStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PutStep)(nil)).Elem()
}

func (i PutStepArgs) ToPutStepOutput() PutStepOutput {
	return i.ToPutStepOutputWithContext(context.Background())
}

func (i PutStepArgs) ToPutStepOutputWithContext(ctx context.Context) PutStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PutStepOutput)
}

type PutStepOutput struct{ *pulumi.OutputState }

func (PutStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PutStep)(nil)).Elem()
}

func (o PutStepOutput) ToPutStepOutput() PutStepOutput {
	return o
}

func (o PutStepOutput) ToPutStepOutputWithContext(ctx context.Context) PutStepOutput {
	return o
}

func (o PutStepOutput) Get_params() pulumi.StringMapOutput {
	return o.ApplyT(func(v PutStep) map[string]string { return v.Get_params }).(pulumi.StringMapOutput)
}

func (o PutStepOutput) Params() pulumi.StringMapOutput {
	return o.ApplyT(func(v PutStep) map[string]string { return v.Params }).(pulumi.StringMapOutput)
}

func (o PutStepOutput) Put() pulumi.StringOutput {
	return o.ApplyT(func(v PutStep) string { return v.Put }).(pulumi.StringOutput)
}

func (o PutStepOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PutStep) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

type Resource struct {
	// Default 1m. The interval on which to check for new versions of the resource. Acceptable interval options are defined by the time.ParseDuration function. If set to never the resource will not be automatically checked. The resource can still be checked manually via the web UI, fly, or webhooks.
	Check_every *string `pulumi:"check_every"`
	// The name of the resource. This should be short and simple. This name will be referenced by build plans of jobs in the pipeline.
	Name string `pulumi:"name"`
	// Default false. If set to true, the metadata for each version of the resource will be viewable by unauthenticated users (assuming the pipeline has been exposed).
	Public *bool `pulumi:"public"`
	// The configuration for the resource. This varies by resource type, and is a black box to Concourse; it is blindly passed to the resource at runtime.
	Source map[string]string `pulumi:"source"`
	// Default []. A list of tags to determine which workers the checks will be performed on. You'll want to specify this if the source is internal to a worker's network, for example.
	Tags []string `pulumi:"tags"`
	// The resource type implementing the resource.
	Type string `pulumi:"type"`
	// If specified, web hooks can be sent to trigger an immediate check of the resource, specifying this value as a primitive form of authentication via query params.
	Webhook_token *string `pulumi:"webhook_token"`
}

// ResourceInput is an input type that accepts ResourceArgs and ResourceOutput values.
// You can construct a concrete instance of `ResourceInput` via:
//
//          ResourceArgs{...}
type ResourceInput interface {
	pulumi.Input

	ToResourceOutput() ResourceOutput
	ToResourceOutputWithContext(context.Context) ResourceOutput
}

type ResourceArgs struct {
	// Default 1m. The interval on which to check for new versions of the resource. Acceptable interval options are defined by the time.ParseDuration function. If set to never the resource will not be automatically checked. The resource can still be checked manually via the web UI, fly, or webhooks.
	Check_every pulumi.StringPtrInput `pulumi:"check_every"`
	// The name of the resource. This should be short and simple. This name will be referenced by build plans of jobs in the pipeline.
	Name pulumi.StringInput `pulumi:"name"`
	// Default false. If set to true, the metadata for each version of the resource will be viewable by unauthenticated users (assuming the pipeline has been exposed).
	Public pulumi.BoolPtrInput `pulumi:"public"`
	// The configuration for the resource. This varies by resource type, and is a black box to Concourse; it is blindly passed to the resource at runtime.
	Source pulumi.StringMapInput `pulumi:"source"`
	// Default []. A list of tags to determine which workers the checks will be performed on. You'll want to specify this if the source is internal to a worker's network, for example.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// The resource type implementing the resource.
	Type pulumi.StringInput `pulumi:"type"`
	// If specified, web hooks can be sent to trigger an immediate check of the resource, specifying this value as a primitive form of authentication via query params.
	Webhook_token pulumi.StringPtrInput `pulumi:"webhook_token"`
}

func (ResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Resource)(nil)).Elem()
}

func (i ResourceArgs) ToResourceOutput() ResourceOutput {
	return i.ToResourceOutputWithContext(context.Background())
}

func (i ResourceArgs) ToResourceOutputWithContext(ctx context.Context) ResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceOutput)
}

// ResourceArrayInput is an input type that accepts ResourceArray and ResourceArrayOutput values.
// You can construct a concrete instance of `ResourceArrayInput` via:
//
//          ResourceArray{ ResourceArgs{...} }
type ResourceArrayInput interface {
	pulumi.Input

	ToResourceArrayOutput() ResourceArrayOutput
	ToResourceArrayOutputWithContext(context.Context) ResourceArrayOutput
}

type ResourceArray []ResourceInput

func (ResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Resource)(nil)).Elem()
}

func (i ResourceArray) ToResourceArrayOutput() ResourceArrayOutput {
	return i.ToResourceArrayOutputWithContext(context.Background())
}

func (i ResourceArray) ToResourceArrayOutputWithContext(ctx context.Context) ResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceArrayOutput)
}

type ResourceOutput struct{ *pulumi.OutputState }

func (ResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Resource)(nil)).Elem()
}

func (o ResourceOutput) ToResourceOutput() ResourceOutput {
	return o
}

func (o ResourceOutput) ToResourceOutputWithContext(ctx context.Context) ResourceOutput {
	return o
}

// Default 1m. The interval on which to check for new versions of the resource. Acceptable interval options are defined by the time.ParseDuration function. If set to never the resource will not be automatically checked. The resource can still be checked manually via the web UI, fly, or webhooks.
func (o ResourceOutput) Check_every() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Resource) *string { return v.Check_every }).(pulumi.StringPtrOutput)
}

// The name of the resource. This should be short and simple. This name will be referenced by build plans of jobs in the pipeline.
func (o ResourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Resource) string { return v.Name }).(pulumi.StringOutput)
}

// Default false. If set to true, the metadata for each version of the resource will be viewable by unauthenticated users (assuming the pipeline has been exposed).
func (o ResourceOutput) Public() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Resource) *bool { return v.Public }).(pulumi.BoolPtrOutput)
}

// The configuration for the resource. This varies by resource type, and is a black box to Concourse; it is blindly passed to the resource at runtime.
func (o ResourceOutput) Source() pulumi.StringMapOutput {
	return o.ApplyT(func(v Resource) map[string]string { return v.Source }).(pulumi.StringMapOutput)
}

// Default []. A list of tags to determine which workers the checks will be performed on. You'll want to specify this if the source is internal to a worker's network, for example.
func (o ResourceOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Resource) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The resource type implementing the resource.
func (o ResourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Resource) string { return v.Type }).(pulumi.StringOutput)
}

// If specified, web hooks can be sent to trigger an immediate check of the resource, specifying this value as a primitive form of authentication via query params.
func (o ResourceOutput) Webhook_token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Resource) *string { return v.Webhook_token }).(pulumi.StringPtrOutput)
}

type ResourceArrayOutput struct{ *pulumi.OutputState }

func (ResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Resource)(nil)).Elem()
}

func (o ResourceArrayOutput) ToResourceArrayOutput() ResourceArrayOutput {
	return o
}

func (o ResourceArrayOutput) ToResourceArrayOutputWithContext(ctx context.Context) ResourceArrayOutput {
	return o
}

func (o ResourceArrayOutput) Index(i pulumi.IntInput) ResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Resource {
		return vs[0].([]Resource)[vs[1].(int)]
	}).(ResourceOutput)
}

type ResourceType struct {
	// Default 1m. The interval on which to check for new versions of the resource. Acceptable interval options are defined by the time.ParseDuration function. If set to never the resource will not be automatically checked. The resource can still be checked manually via the web UI, fly, or webhooks.
	Check_every *string `pulumi:"check_every"`
	// The default configuration for the resource type. This varies by resource type, and is a black box to Concourse; it is merged with (duplicate fields are overwritten by) resource.source and passed to the resource at runtime.
	Defaults map[string]string `pulumi:"defaults"`
	// TThe name of the resource type. This should be short and simple. This name will be referenced by pipeline.resources defined within the same pipeline, and task.image_resources used by tasks running in the pipeline.
	Name *string `pulumi:"name"`
	// Arbitrary config to pass when running the get to fetch the resource type's image.
	Params map[string]string `pulumi:"params"`
	// Default false. If set to true, the resource's containers will be run with full capabilities, as determined by the worker backend the task runs on.
	Privileged *bool `pulumi:"privileged"`
	// The configuration for the resource. This varies by resource type, and is a black box to Concourse; it is blindly passed to the resource at runtime.
	Source map[string]string `pulumi:"source"`
	// Default []. A list of tags to determine which workers the checks will be performed on. You'll want to specify this if the source is internal to a worker's network, for example.
	Tags []string `pulumi:"tags"`
	// The resource type implementing the resource.
	Type *string `pulumi:"type"`
}

// ResourceTypeInput is an input type that accepts ResourceTypeArgs and ResourceTypeOutput values.
// You can construct a concrete instance of `ResourceTypeInput` via:
//
//          ResourceTypeArgs{...}
type ResourceTypeInput interface {
	pulumi.Input

	ToResourceTypeOutput() ResourceTypeOutput
	ToResourceTypeOutputWithContext(context.Context) ResourceTypeOutput
}

type ResourceTypeArgs struct {
	// Default 1m. The interval on which to check for new versions of the resource. Acceptable interval options are defined by the time.ParseDuration function. If set to never the resource will not be automatically checked. The resource can still be checked manually via the web UI, fly, or webhooks.
	Check_every pulumi.StringPtrInput `pulumi:"check_every"`
	// The default configuration for the resource type. This varies by resource type, and is a black box to Concourse; it is merged with (duplicate fields are overwritten by) resource.source and passed to the resource at runtime.
	Defaults pulumi.StringMapInput `pulumi:"defaults"`
	// TThe name of the resource type. This should be short and simple. This name will be referenced by pipeline.resources defined within the same pipeline, and task.image_resources used by tasks running in the pipeline.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Arbitrary config to pass when running the get to fetch the resource type's image.
	Params pulumi.StringMapInput `pulumi:"params"`
	// Default false. If set to true, the resource's containers will be run with full capabilities, as determined by the worker backend the task runs on.
	Privileged pulumi.BoolPtrInput `pulumi:"privileged"`
	// The configuration for the resource. This varies by resource type, and is a black box to Concourse; it is blindly passed to the resource at runtime.
	Source pulumi.StringMapInput `pulumi:"source"`
	// Default []. A list of tags to determine which workers the checks will be performed on. You'll want to specify this if the source is internal to a worker's network, for example.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// The resource type implementing the resource.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ResourceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceType)(nil)).Elem()
}

func (i ResourceTypeArgs) ToResourceTypeOutput() ResourceTypeOutput {
	return i.ToResourceTypeOutputWithContext(context.Background())
}

func (i ResourceTypeArgs) ToResourceTypeOutputWithContext(ctx context.Context) ResourceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceTypeOutput)
}

// ResourceTypeArrayInput is an input type that accepts ResourceTypeArray and ResourceTypeArrayOutput values.
// You can construct a concrete instance of `ResourceTypeArrayInput` via:
//
//          ResourceTypeArray{ ResourceTypeArgs{...} }
type ResourceTypeArrayInput interface {
	pulumi.Input

	ToResourceTypeArrayOutput() ResourceTypeArrayOutput
	ToResourceTypeArrayOutputWithContext(context.Context) ResourceTypeArrayOutput
}

type ResourceTypeArray []ResourceTypeInput

func (ResourceTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceType)(nil)).Elem()
}

func (i ResourceTypeArray) ToResourceTypeArrayOutput() ResourceTypeArrayOutput {
	return i.ToResourceTypeArrayOutputWithContext(context.Background())
}

func (i ResourceTypeArray) ToResourceTypeArrayOutputWithContext(ctx context.Context) ResourceTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceTypeArrayOutput)
}

type ResourceTypeOutput struct{ *pulumi.OutputState }

func (ResourceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceType)(nil)).Elem()
}

func (o ResourceTypeOutput) ToResourceTypeOutput() ResourceTypeOutput {
	return o
}

func (o ResourceTypeOutput) ToResourceTypeOutputWithContext(ctx context.Context) ResourceTypeOutput {
	return o
}

// Default 1m. The interval on which to check for new versions of the resource. Acceptable interval options are defined by the time.ParseDuration function. If set to never the resource will not be automatically checked. The resource can still be checked manually via the web UI, fly, or webhooks.
func (o ResourceTypeOutput) Check_every() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceType) *string { return v.Check_every }).(pulumi.StringPtrOutput)
}

// The default configuration for the resource type. This varies by resource type, and is a black box to Concourse; it is merged with (duplicate fields are overwritten by) resource.source and passed to the resource at runtime.
func (o ResourceTypeOutput) Defaults() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceType) map[string]string { return v.Defaults }).(pulumi.StringMapOutput)
}

// TThe name of the resource type. This should be short and simple. This name will be referenced by pipeline.resources defined within the same pipeline, and task.image_resources used by tasks running in the pipeline.
func (o ResourceTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Arbitrary config to pass when running the get to fetch the resource type's image.
func (o ResourceTypeOutput) Params() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceType) map[string]string { return v.Params }).(pulumi.StringMapOutput)
}

// Default false. If set to true, the resource's containers will be run with full capabilities, as determined by the worker backend the task runs on.
func (o ResourceTypeOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceType) *bool { return v.Privileged }).(pulumi.BoolPtrOutput)
}

// The configuration for the resource. This varies by resource type, and is a black box to Concourse; it is blindly passed to the resource at runtime.
func (o ResourceTypeOutput) Source() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceType) map[string]string { return v.Source }).(pulumi.StringMapOutput)
}

// Default []. A list of tags to determine which workers the checks will be performed on. You'll want to specify this if the source is internal to a worker's network, for example.
func (o ResourceTypeOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceType) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The resource type implementing the resource.
func (o ResourceTypeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceType) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ResourceTypeArrayOutput struct{ *pulumi.OutputState }

func (ResourceTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceType)(nil)).Elem()
}

func (o ResourceTypeArrayOutput) ToResourceTypeArrayOutput() ResourceTypeArrayOutput {
	return o
}

func (o ResourceTypeArrayOutput) ToResourceTypeArrayOutputWithContext(ctx context.Context) ResourceTypeArrayOutput {
	return o
}

func (o ResourceTypeArrayOutput) Index(i pulumi.IntInput) ResourceTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceType {
		return vs[0].([]ResourceType)[vs[1].(int)]
	}).(ResourceTypeOutput)
}

type RunArgs struct {
	Args []string `pulumi:"args"`
	Dir  *string  `pulumi:"dir"`
	Path string   `pulumi:"path"`
	User *string  `pulumi:"user"`
}

// RunArgsInput is an input type that accepts RunArgsArgs and RunArgsOutput values.
// You can construct a concrete instance of `RunArgsInput` via:
//
//          RunArgsArgs{...}
type RunArgsInput interface {
	pulumi.Input

	ToRunArgsOutput() RunArgsOutput
	ToRunArgsOutputWithContext(context.Context) RunArgsOutput
}

type RunArgsArgs struct {
	Args pulumi.StringArrayInput `pulumi:"args"`
	Dir  pulumi.StringPtrInput   `pulumi:"dir"`
	Path pulumi.StringInput      `pulumi:"path"`
	User pulumi.StringPtrInput   `pulumi:"user"`
}

func (RunArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RunArgs)(nil)).Elem()
}

func (i RunArgsArgs) ToRunArgsOutput() RunArgsOutput {
	return i.ToRunArgsOutputWithContext(context.Background())
}

func (i RunArgsArgs) ToRunArgsOutputWithContext(ctx context.Context) RunArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunArgsOutput)
}

func (i RunArgsArgs) ToRunArgsPtrOutput() RunArgsPtrOutput {
	return i.ToRunArgsPtrOutputWithContext(context.Background())
}

func (i RunArgsArgs) ToRunArgsPtrOutputWithContext(ctx context.Context) RunArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunArgsOutput).ToRunArgsPtrOutputWithContext(ctx)
}

// RunArgsPtrInput is an input type that accepts RunArgsArgs, RunArgsPtr and RunArgsPtrOutput values.
// You can construct a concrete instance of `RunArgsPtrInput` via:
//
//          RunArgsArgs{...}
//
//  or:
//
//          nil
type RunArgsPtrInput interface {
	pulumi.Input

	ToRunArgsPtrOutput() RunArgsPtrOutput
	ToRunArgsPtrOutputWithContext(context.Context) RunArgsPtrOutput
}

type runArgsPtrType RunArgsArgs

func RunArgsPtr(v *RunArgsArgs) RunArgsPtrInput {
	return (*runArgsPtrType)(v)
}

func (*runArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RunArgs)(nil)).Elem()
}

func (i *runArgsPtrType) ToRunArgsPtrOutput() RunArgsPtrOutput {
	return i.ToRunArgsPtrOutputWithContext(context.Background())
}

func (i *runArgsPtrType) ToRunArgsPtrOutputWithContext(ctx context.Context) RunArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunArgsPtrOutput)
}

type RunArgsOutput struct{ *pulumi.OutputState }

func (RunArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RunArgs)(nil)).Elem()
}

func (o RunArgsOutput) ToRunArgsOutput() RunArgsOutput {
	return o
}

func (o RunArgsOutput) ToRunArgsOutputWithContext(ctx context.Context) RunArgsOutput {
	return o
}

func (o RunArgsOutput) ToRunArgsPtrOutput() RunArgsPtrOutput {
	return o.ToRunArgsPtrOutputWithContext(context.Background())
}

func (o RunArgsOutput) ToRunArgsPtrOutputWithContext(ctx context.Context) RunArgsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RunArgs) *RunArgs {
		return &v
	}).(RunArgsPtrOutput)
}

func (o RunArgsOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RunArgs) []string { return v.Args }).(pulumi.StringArrayOutput)
}

func (o RunArgsOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunArgs) *string { return v.Dir }).(pulumi.StringPtrOutput)
}

func (o RunArgsOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v RunArgs) string { return v.Path }).(pulumi.StringOutput)
}

func (o RunArgsOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunArgs) *string { return v.User }).(pulumi.StringPtrOutput)
}

type RunArgsPtrOutput struct{ *pulumi.OutputState }

func (RunArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RunArgs)(nil)).Elem()
}

func (o RunArgsPtrOutput) ToRunArgsPtrOutput() RunArgsPtrOutput {
	return o
}

func (o RunArgsPtrOutput) ToRunArgsPtrOutputWithContext(ctx context.Context) RunArgsPtrOutput {
	return o
}

func (o RunArgsPtrOutput) Elem() RunArgsOutput {
	return o.ApplyT(func(v *RunArgs) RunArgs {
		if v != nil {
			return *v
		}
		var ret RunArgs
		return ret
	}).(RunArgsOutput)
}

func (o RunArgsPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RunArgs) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

func (o RunArgsPtrOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RunArgs) *string {
		if v == nil {
			return nil
		}
		return v.Dir
	}).(pulumi.StringPtrOutput)
}

func (o RunArgsPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RunArgs) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

func (o RunArgsPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RunArgs) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

type TaskConfig struct {
	Image_resource AnonymousResource `pulumi:"image_resource"`
	Platform       string            `pulumi:"platform"`
	Run            RunArgs           `pulumi:"run"`
}

// TaskConfigInput is an input type that accepts TaskConfigArgs and TaskConfigOutput values.
// You can construct a concrete instance of `TaskConfigInput` via:
//
//          TaskConfigArgs{...}
type TaskConfigInput interface {
	pulumi.Input

	ToTaskConfigOutput() TaskConfigOutput
	ToTaskConfigOutputWithContext(context.Context) TaskConfigOutput
}

type TaskConfigArgs struct {
	Image_resource AnonymousResourceInput `pulumi:"image_resource"`
	Platform       pulumi.StringInput     `pulumi:"platform"`
	Run            RunArgsInput           `pulumi:"run"`
}

func (TaskConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskConfig)(nil)).Elem()
}

func (i TaskConfigArgs) ToTaskConfigOutput() TaskConfigOutput {
	return i.ToTaskConfigOutputWithContext(context.Background())
}

func (i TaskConfigArgs) ToTaskConfigOutputWithContext(ctx context.Context) TaskConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskConfigOutput)
}

func (i TaskConfigArgs) ToTaskConfigPtrOutput() TaskConfigPtrOutput {
	return i.ToTaskConfigPtrOutputWithContext(context.Background())
}

func (i TaskConfigArgs) ToTaskConfigPtrOutputWithContext(ctx context.Context) TaskConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskConfigOutput).ToTaskConfigPtrOutputWithContext(ctx)
}

// TaskConfigPtrInput is an input type that accepts TaskConfigArgs, TaskConfigPtr and TaskConfigPtrOutput values.
// You can construct a concrete instance of `TaskConfigPtrInput` via:
//
//          TaskConfigArgs{...}
//
//  or:
//
//          nil
type TaskConfigPtrInput interface {
	pulumi.Input

	ToTaskConfigPtrOutput() TaskConfigPtrOutput
	ToTaskConfigPtrOutputWithContext(context.Context) TaskConfigPtrOutput
}

type taskConfigPtrType TaskConfigArgs

func TaskConfigPtr(v *TaskConfigArgs) TaskConfigPtrInput {
	return (*taskConfigPtrType)(v)
}

func (*taskConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskConfig)(nil)).Elem()
}

func (i *taskConfigPtrType) ToTaskConfigPtrOutput() TaskConfigPtrOutput {
	return i.ToTaskConfigPtrOutputWithContext(context.Background())
}

func (i *taskConfigPtrType) ToTaskConfigPtrOutputWithContext(ctx context.Context) TaskConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskConfigPtrOutput)
}

type TaskConfigOutput struct{ *pulumi.OutputState }

func (TaskConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskConfig)(nil)).Elem()
}

func (o TaskConfigOutput) ToTaskConfigOutput() TaskConfigOutput {
	return o
}

func (o TaskConfigOutput) ToTaskConfigOutputWithContext(ctx context.Context) TaskConfigOutput {
	return o
}

func (o TaskConfigOutput) ToTaskConfigPtrOutput() TaskConfigPtrOutput {
	return o.ToTaskConfigPtrOutputWithContext(context.Background())
}

func (o TaskConfigOutput) ToTaskConfigPtrOutputWithContext(ctx context.Context) TaskConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskConfig) *TaskConfig {
		return &v
	}).(TaskConfigPtrOutput)
}

func (o TaskConfigOutput) Image_resource() AnonymousResourceOutput {
	return o.ApplyT(func(v TaskConfig) AnonymousResource { return v.Image_resource }).(AnonymousResourceOutput)
}

func (o TaskConfigOutput) Platform() pulumi.StringOutput {
	return o.ApplyT(func(v TaskConfig) string { return v.Platform }).(pulumi.StringOutput)
}

func (o TaskConfigOutput) Run() RunArgsOutput {
	return o.ApplyT(func(v TaskConfig) RunArgs { return v.Run }).(RunArgsOutput)
}

type TaskConfigPtrOutput struct{ *pulumi.OutputState }

func (TaskConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskConfig)(nil)).Elem()
}

func (o TaskConfigPtrOutput) ToTaskConfigPtrOutput() TaskConfigPtrOutput {
	return o
}

func (o TaskConfigPtrOutput) ToTaskConfigPtrOutputWithContext(ctx context.Context) TaskConfigPtrOutput {
	return o
}

func (o TaskConfigPtrOutput) Elem() TaskConfigOutput {
	return o.ApplyT(func(v *TaskConfig) TaskConfig {
		if v != nil {
			return *v
		}
		var ret TaskConfig
		return ret
	}).(TaskConfigOutput)
}

func (o TaskConfigPtrOutput) Image_resource() AnonymousResourcePtrOutput {
	return o.ApplyT(func(v *TaskConfig) *AnonymousResource {
		if v == nil {
			return nil
		}
		return &v.Image_resource
	}).(AnonymousResourcePtrOutput)
}

func (o TaskConfigPtrOutput) Platform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Platform
	}).(pulumi.StringPtrOutput)
}

func (o TaskConfigPtrOutput) Run() RunArgsPtrOutput {
	return o.ApplyT(func(v *TaskConfig) *RunArgs {
		if v == nil {
			return nil
		}
		return &v.Run
	}).(RunArgsPtrOutput)
}

type TaskStep struct {
	Config *TaskConfig `pulumi:"config"`
	Image  *string     `pulumi:"image"`
	Task   string      `pulumi:"task"`
}

// TaskStepInput is an input type that accepts TaskStepArgs and TaskStepOutput values.
// You can construct a concrete instance of `TaskStepInput` via:
//
//          TaskStepArgs{...}
type TaskStepInput interface {
	pulumi.Input

	ToTaskStepOutput() TaskStepOutput
	ToTaskStepOutputWithContext(context.Context) TaskStepOutput
}

type TaskStepArgs struct {
	Config TaskConfigPtrInput    `pulumi:"config"`
	Image  pulumi.StringPtrInput `pulumi:"image"`
	Task   pulumi.StringInput    `pulumi:"task"`
}

func (TaskStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskStep)(nil)).Elem()
}

func (i TaskStepArgs) ToTaskStepOutput() TaskStepOutput {
	return i.ToTaskStepOutputWithContext(context.Background())
}

func (i TaskStepArgs) ToTaskStepOutputWithContext(ctx context.Context) TaskStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskStepOutput)
}

type TaskStepOutput struct{ *pulumi.OutputState }

func (TaskStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskStep)(nil)).Elem()
}

func (o TaskStepOutput) ToTaskStepOutput() TaskStepOutput {
	return o
}

func (o TaskStepOutput) ToTaskStepOutputWithContext(ctx context.Context) TaskStepOutput {
	return o
}

func (o TaskStepOutput) Config() TaskConfigPtrOutput {
	return o.ApplyT(func(v TaskStep) *TaskConfig { return v.Config }).(TaskConfigPtrOutput)
}

func (o TaskStepOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskStep) *string { return v.Image }).(pulumi.StringPtrOutput)
}

func (o TaskStepOutput) Task() pulumi.StringOutput {
	return o.ApplyT(func(v TaskStep) string { return v.Task }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(AnonymousResourceOutput{})
	pulumi.RegisterOutputType(AnonymousResourcePtrOutput{})
	pulumi.RegisterOutputType(DisplayOptionsOutput{})
	pulumi.RegisterOutputType(DisplayOptionsPtrOutput{})
	pulumi.RegisterOutputType(GetStepOutput{})
	pulumi.RegisterOutputType(GroupOutput{})
	pulumi.RegisterOutputType(GroupArrayOutput{})
	pulumi.RegisterOutputType(InParallelConfigOutput{})
	pulumi.RegisterOutputType(InParallelStepOutput{})
	pulumi.RegisterOutputType(JobOutput{})
	pulumi.RegisterOutputType(JobArrayOutput{})
	pulumi.RegisterOutputType(PutStepOutput{})
	pulumi.RegisterOutputType(ResourceOutput{})
	pulumi.RegisterOutputType(ResourceArrayOutput{})
	pulumi.RegisterOutputType(ResourceTypeOutput{})
	pulumi.RegisterOutputType(ResourceTypeArrayOutput{})
	pulumi.RegisterOutputType(RunArgsOutput{})
	pulumi.RegisterOutputType(RunArgsPtrOutput{})
	pulumi.RegisterOutputType(TaskConfigOutput{})
	pulumi.RegisterOutputType(TaskConfigPtrOutput{})
	pulumi.RegisterOutputType(TaskStepOutput{})
}
