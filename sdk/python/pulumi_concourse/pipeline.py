# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from ._inputs import *

__all__ = ['PipelineArgs', 'Pipeline']

@pulumi.input_type
class PipelineArgs:
    def __init__(__self__, *,
                 jobs: pulumi.Input[Sequence[pulumi.Input['JobArgs']]],
                 display: Optional[pulumi.Input['DisplayOptionsArgs']] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['GroupArgs']]]] = None,
                 pipeline_name: Optional[pulumi.Input[str]] = None,
                 resource_types: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceTypeArgs']]]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceArgs']]]] = None):
        """
        The set of arguments for constructing a Pipeline resource.
        :param pulumi.Input[Sequence[pulumi.Input['JobArgs']]] jobs: A set of jobs for the pipeline to continuously schedule. At least one job is required for a pipeline to be valid.
        :param pulumi.Input['DisplayOptionsArgs'] display: Visual configurations for personalizing your pipeline.
        :param pulumi.Input[Sequence[pulumi.Input['GroupArgs']]] groups: A list of job groups to use for organizing jobs in the web UI. Groups have no functional effect on your pipeline. They are purely for making it easier to grok large pipelines in the web UI.
        :param pulumi.Input[str] pipeline_name: Explicitly set to overwrite auto-naming.
        :param pulumi.Input[Sequence[pulumi.Input['ResourceTypeArgs']]] resource_types: A set of resource types for resources within the pipeline to use.
        :param pulumi.Input[Sequence[pulumi.Input['ResourceArgs']]] resources: A set of resources for the pipeline to continuously check.
        """
        pulumi.set(__self__, "jobs", jobs)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if pipeline_name is not None:
            pulumi.set(__self__, "pipeline_name", pipeline_name)
        if resource_types is not None:
            pulumi.set(__self__, "resource_types", resource_types)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def jobs(self) -> pulumi.Input[Sequence[pulumi.Input['JobArgs']]]:
        """
        A set of jobs for the pipeline to continuously schedule. At least one job is required for a pipeline to be valid.
        """
        return pulumi.get(self, "jobs")

    @jobs.setter
    def jobs(self, value: pulumi.Input[Sequence[pulumi.Input['JobArgs']]]):
        pulumi.set(self, "jobs", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[pulumi.Input['DisplayOptionsArgs']]:
        """
        Visual configurations for personalizing your pipeline.
        """
        return pulumi.get(self, "display")

    @display.setter
    def display(self, value: Optional[pulumi.Input['DisplayOptionsArgs']]):
        pulumi.set(self, "display", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GroupArgs']]]]:
        """
        A list of job groups to use for organizing jobs in the web UI. Groups have no functional effect on your pipeline. They are purely for making it easier to grok large pipelines in the web UI.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GroupArgs']]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="pipelineName")
    def pipeline_name(self) -> Optional[pulumi.Input[str]]:
        """
        Explicitly set to overwrite auto-naming.
        """
        return pulumi.get(self, "pipeline_name")

    @pipeline_name.setter
    def pipeline_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pipeline_name", value)

    @property
    @pulumi.getter(name="resourceTypes")
    def resource_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourceTypeArgs']]]]:
        """
        A set of resource types for resources within the pipeline to use.
        """
        return pulumi.get(self, "resource_types")

    @resource_types.setter
    def resource_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceTypeArgs']]]]):
        pulumi.set(self, "resource_types", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourceArgs']]]]:
        """
        A set of resources for the pipeline to continuously check.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceArgs']]]]):
        pulumi.set(self, "resources", value)


class Pipeline(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 display: Optional[pulumi.Input[pulumi.InputType['DisplayOptionsArgs']]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GroupArgs']]]]] = None,
                 jobs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['JobArgs']]]]] = None,
                 pipeline_name: Optional[pulumi.Input[str]] = None,
                 resource_types: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ResourceTypeArgs']]]]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ResourceArgs']]]]] = None,
                 __props__=None):
        """
        Create a Pipeline resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['DisplayOptionsArgs']] display: Visual configurations for personalizing your pipeline.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GroupArgs']]]] groups: A list of job groups to use for organizing jobs in the web UI. Groups have no functional effect on your pipeline. They are purely for making it easier to grok large pipelines in the web UI.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['JobArgs']]]] jobs: A set of jobs for the pipeline to continuously schedule. At least one job is required for a pipeline to be valid.
        :param pulumi.Input[str] pipeline_name: Explicitly set to overwrite auto-naming.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ResourceTypeArgs']]]] resource_types: A set of resource types for resources within the pipeline to use.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ResourceArgs']]]] resources: A set of resources for the pipeline to continuously check.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PipelineArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Pipeline resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PipelineArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PipelineArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 display: Optional[pulumi.Input[pulumi.InputType['DisplayOptionsArgs']]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GroupArgs']]]]] = None,
                 jobs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['JobArgs']]]]] = None,
                 pipeline_name: Optional[pulumi.Input[str]] = None,
                 resource_types: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ResourceTypeArgs']]]]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ResourceArgs']]]]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PipelineArgs.__new__(PipelineArgs)

            __props__.__dict__["display"] = display
            __props__.__dict__["groups"] = groups
            if jobs is None and not opts.urn:
                raise TypeError("Missing required property 'jobs'")
            __props__.__dict__["jobs"] = jobs
            __props__.__dict__["pipeline_name"] = pipeline_name
            __props__.__dict__["resource_types"] = resource_types
            __props__.__dict__["resources"] = resources
            __props__.__dict__["name"] = None
        super(Pipeline, __self__).__init__(
            'concourse:index:Pipeline',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Pipeline':
        """
        Get an existing Pipeline resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = PipelineArgs.__new__(PipelineArgs)

        __props__.__dict__["name"] = None
        return Pipeline(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the pipeline.
        """
        return pulumi.get(self, "name")

