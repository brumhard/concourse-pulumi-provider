{
    "name": "concourse",
    "version": "0.0.1",
    "description": "A native Pulumi package for creating and managing Concourse resources.",
    "keywords": [
        "pulumi",
        "concourse"
    ],
    "license": "Apache-2.0",
    "repository": "https://github.com/brumhard/pulumi-concourse",
    "config": {
        "variables": {
            "url": {
                "type": "string",
                "description": "URL of your concourse instance."
            },
            "password": {
                "type": "string",
                "description": "Password for basic auth."
            },
            "username": {
                "type": "string",
                "description": "Username for basic auth."
            },
            "team": {
                "type": "string",
                "description": "Team to authenticate with."
            }
        }
    },
    "provider": {
        "description": "The provider type for the concourse package.",
        "type": "object",
        "inputProperties": {
            "url": {
                "type": "string",
                "description": "URL of your concourse instance.",
                "defaultInfo": {
                    "environment": [
                        "CONCOURSE_URL"
                    ]
                }
            },
            "password": {
                "type": "string",
                "description": "Password for basic auth.",
                "defaultInfo": {
                    "environment": [
                        "CONCOURSE_PASSWORD"
                    ]
                }
            },
            "username": {
                "type": "string",
                "description": "Username for basic auth.",
                "defaultInfo": {
                    "environment": [
                        "CONCOURSE_USERNAME"
                    ]
                }
            },
            "team": {
                "type": "string",
                "description": "Team to authenticate with.",
                "defaultInfo": {
                    "environment": [
                        "CONCOURSE_TEAM"
                    ]
                }
            }
        }
    },
    "types": {
        "concourse:index:AnonymousResource": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "source": {
                    "type": "object"
                },
                "params": {
                    "type": "object"
                }
            },
            "required": [
                "type",
                "source"
            ]
        },
        "concourse:index:RunArgs": {
            "type": "object",
            "properties": {
                "path": {
                    "type": "string"
                },
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dir": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            },
            "required": [
                "path"
            ]
        },
        "concourse:index:TaskConfig": {
            "type": "object",
            "properties": {
                "platform": {
                    "type": "string"
                },
                "image_resource": {
                    "type": "object",
                    "$ref": "#/types/concourse:index:AnonymousResource"
                },
                "run": {
                    "type": "object",
                    "$ref": "#/types/concourse:index:RunArgs"
                }
            },
            "required": [
                "platform",
                "image_resource",
                "run"
            ]
        },
        "concourse:index:TaskStep": {
            "type": "object",
            "properties": {
                "task": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "config": {
                    "type": "object",
                    "$ref": "#/types/concourse:index:TaskConfig"
                }
            },
            "required": [
                "task"
            ]
        },
        "concourse:index:GetStep": {
            "type": "object",
            "properties": {
                "get": {
                    "type": "string"
                },
                "resource": {
                    "type": "string"
                },
                "passed": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "params": {
                    "type": "object"
                },
                "trigger": {
                    "type": "boolean"
                }
            },
            "required": [
                "get"
            ]
        },
        "concourse:index:PutStep": {
            "type": "object",
            "properties": {
                "put": {
                    "type": "string"
                },
                "resource": {
                    "type": "string"
                },
                "params": {
                    "type": "object"
                },
                "get_params": {
                    "type": "object"
                }
            },
            "required": [
                "put"
            ]
        },
        "concourse:index:InParallelStep": {
            "type": "object",
            "properties": {
                "in_parallel": {
                    "type": "object",
                    "$ref": "#/types/concourse:index:InParallelConfig"
                }
            },
            "required": [
                "in_parallel"
            ]
        },
        "concourse:index:InParallelConfig": {
            "type": "object",
            "properties": {
                "steps": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/types/concourse:index:TaskStep"
                            },
                            {
                                "$ref": "#/types/concourse:index:GetStep"
                            },
                            {
                                "$ref": "#/types/concourse:index:PutStep"
                            },
                            {
                                "$ref": "#/types/concourse:index:InParallelStep"
                            }
                        ]
                    }
                },
                "limit": {
                    "type": "number"
                },
                "fail_fast": {
                    "type": "boolean"
                }
            },
            "required": [
                "steps"
            ]
        },
        "concourse:index:Group": {
            "type": "object",
            "description": "",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "A unique name for the group. This should be short and simple as it will be used as the tab name for navigation."
                },
                "jobs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of jobs that should appear in this group. A job may appear in multiple groups. Neighbours of jobs in the current group will also appear on the same page in order to give context of the location of the group in the pipeline. You may also use any valid glob to represent several jobs."
                }
            },
            "required": [
                "name"
            ]
        },
        "concourse:index:Resource": {
            "type": "object",
            "description": "",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the resource. This should be short and simple. This name will be referenced by build plans of jobs in the pipeline."
                },
                "type": {
                    "type": "string",
                    "description": "The resource type implementing the resource."
                },
                "source": {
                    "type": "object",
                    "description": "The configuration for the resource. This varies by resource type, and is a black box to Concourse; it is blindly passed to the resource at runtime."
                },
                "check_every": {
                    "type": "string",
                    "description": "Default 1m. The interval on which to check for new versions of the resource. Acceptable interval options are defined by the time.ParseDuration function. If set to never the resource will not be automatically checked. The resource can still be checked manually via the web UI, fly, or webhooks."
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Default []. A list of tags to determine which workers the checks will be performed on. You'll want to specify this if the source is internal to a worker's network, for example."
                },
                "public": {
                    "type": "boolean",
                    "description": "Default false. If set to true, the metadata for each version of the resource will be viewable by unauthenticated users (assuming the pipeline has been exposed)."
                },
                "webhook_token": {
                    "type": "string",
                    "description": "If specified, web hooks can be sent to trigger an immediate check of the resource, specifying this value as a primitive form of authentication via query params."
                }
            },
            "required": [
                "name",
                "type",
                "source"
            ]
        },
        "concourse:index:ResourceType": {
            "type": "object",
            "description": "",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "TThe name of the resource type. This should be short and simple. This name will be referenced by pipeline.resources defined within the same pipeline, and task.image_resources used by tasks running in the pipeline."
                },
                "type": {
                    "type": "string",
                    "description": "The resource type implementing the resource."
                },
                "source": {
                    "type": "object",
                    "description": "The configuration for the resource. This varies by resource type, and is a black box to Concourse; it is blindly passed to the resource at runtime."
                },
                "privileged": {
                    "type": "boolean",
                    "description": "Default false. If set to true, the resource's containers will be run with full capabilities, as determined by the worker backend the task runs on."
                },
                "params": {
                    "type": "object",
                    "description": "Arbitrary config to pass when running the get to fetch the resource type's image."
                },
                "check_every": {
                    "type": "string",
                    "description": "Default 1m. The interval on which to check for new versions of the resource. Acceptable interval options are defined by the time.ParseDuration function. If set to never the resource will not be automatically checked. The resource can still be checked manually via the web UI, fly, or webhooks."
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Default []. A list of tags to determine which workers the checks will be performed on. You'll want to specify this if the source is internal to a worker's network, for example."
                },
                "defaults": {
                    "type": "object",
                    "description": "The default configuration for the resource type. This varies by resource type, and is a black box to Concourse; it is merged with (duplicate fields are overwritten by) resource.source and passed to the resource at runtime."
                }
            }
        },
        "concourse:index:Job": {
            "type": "object",
            "description": "",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the job. This should be short; it will show up in URLs."
                },
                "plan": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/types/concourse:index:TaskStep"
                            },
                            {
                                "$ref": "#/types/concourse:index:GetStep"
                            },
                            {
                                "$ref": "#/types/concourse:index:PutStep"
                            },
                            {
                                "$ref": "#/types/concourse:index:InParallelStep"
                            }
                        ]
                    }
                },
                "serial": {
                    "type": "boolean",
                    "description": "Default false. If set to true, builds will queue up and execute one-by-one, rather than executing in parallel."
                },
                "max_in_flight": {
                    "type": "number",
                    "description": "If set, specifies a maximum number of builds to run at a time. If serial or serial_groups are set, they take precedence and force this value to be 1."
                },
                "public": {
                    "type": "boolean",
                    "description": "Default false. If set to true, the build log of this job will be viewable by unauthenticated users. Unauthenticated users will always be able to see the inputs, outputs, and build status history of a job. This is useful if you would like to expose your pipeline publicly without showing sensitive information in the build log."
                },
                "on_success": {
                    "description": "Step to execute when the job succeeds.",
                    "oneOf": [
                        {
                            "$ref": "#/types/concourse:index:TaskStep"
                        },
                        {
                            "$ref": "#/types/concourse:index:GetStep"
                        },
                        {
                            "$ref": "#/types/concourse:index:PutStep"
                        },
                        {
                            "$ref": "#/types/concourse:index:InParallelStep"
                        }
                    ]
                },
                "on_failure": {
                    "description": "Step to execute when the job fails.",
                    "oneOf": [
                        {
                            "$ref": "#/types/concourse:index:TaskStep"
                        },
                        {
                            "$ref": "#/types/concourse:index:GetStep"
                        },
                        {
                            "$ref": "#/types/concourse:index:PutStep"
                        },
                        {
                            "$ref": "#/types/concourse:index:InParallelStep"
                        }
                    ]
                },
                "on_error": {
                    "description": "Step to execute when the job errors.",
                    "oneOf": [
                        {
                            "$ref": "#/types/concourse:index:TaskStep"
                        },
                        {
                            "$ref": "#/types/concourse:index:GetStep"
                        },
                        {
                            "$ref": "#/types/concourse:index:PutStep"
                        },
                        {
                            "$ref": "#/types/concourse:index:InParallelStep"
                        }
                    ]
                },
                "on_abort": {
                    "description": "Step to execute when the job aborts.",
                    "oneOf": [
                        {
                            "$ref": "#/types/concourse:index:TaskStep"
                        },
                        {
                            "$ref": "#/types/concourse:index:GetStep"
                        },
                        {
                            "$ref": "#/types/concourse:index:PutStep"
                        },
                        {
                            "$ref": "#/types/concourse:index:InParallelStep"
                        }
                    ]
                },
                "ensure": {
                    "description": "Step to execute regardless of whether the job succeeds, fails, errors, or aborts.",
                    "oneOf": [
                        {
                            "$ref": "#/types/concourse:index:TaskStep"
                        },
                        {
                            "$ref": "#/types/concourse:index:GetStep"
                        },
                        {
                            "$ref": "#/types/concourse:index:PutStep"
                        },
                        {
                            "$ref": "#/types/concourse:index:InParallelStep"
                        }
                    ]
                }
            },
            "required": [
                "name",
                "plan"
            ]
        },
        "concourse:index:DisplayOptions": {
            "type": "object",
            "properties": {
                "background_image": {
                    "type": "string",
                    "description": "Allows users to specify a custom background image which is put at 30% opacity, grayscaled and blended into existing background. Must be an http, https, or relative URL."
                }
            }
        }
    },
    "resources": {
        "concourse:index:Pipeline": {
            "description": "",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the pipeline."
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/types/concourse:index:Group"
                    },
                    "description": "A list of job groups to use for organizing jobs in the web UI. Groups have no functional effect on your pipeline. They are purely for making it easier to grok large pipelines in the web UI."
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/types/concourse:index:Resource"
                    },
                    "description": "A set of resources for the pipeline to continuously check."
                },
                "resource_types": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/types/concourse:index:ResourceType"
                    },
                    "description": "A set of resource types for resources within the pipeline to use."
                },
                "jobs": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/types/concourse:index:Job"
                    },
                    "description": "A set of jobs for the pipeline to continuously schedule. At least one job is required for a pipeline to be valid."
                },
                "display": {
                    "type": "object",
                    "$ref": "#/types/concourse:index:DisplayOptions",
                    "description": "Visual configurations for personalizing your pipeline."
                }
            },
            "requiredInputs": [
                "jobs"
            ]
        }
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/brumhard/pulumi-concourse/sdk/go/concourse"
        },
        "nodejs": {
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            }
        },
        "python": {
            "requires": {
                "pulumi": ">=3.0.0,<4.0.0"
            }
        }
    }
}