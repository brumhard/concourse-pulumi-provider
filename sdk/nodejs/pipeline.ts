// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class Pipeline extends pulumi.CustomResource {
    /**
     * Get an existing Pipeline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Pipeline {
        return new Pipeline(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'concourse:index:Pipeline';

    /**
     * Returns true if the given object is an instance of Pipeline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Pipeline {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Pipeline.__pulumiType;
    }

    /**
     * The name of the pipeline.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;

    /**
     * Create a Pipeline resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PipelineArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.jobs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'jobs'");
            }
            inputs["display"] = args ? args.display : undefined;
            inputs["groups"] = args ? args.groups : undefined;
            inputs["jobs"] = args ? args.jobs : undefined;
            inputs["resourceTypes"] = args ? args.resourceTypes : undefined;
            inputs["resources"] = args ? args.resources : undefined;
            inputs["name"] = undefined /*out*/;
        } else {
            inputs["name"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Pipeline.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Pipeline resource.
 */
export interface PipelineArgs {
    /**
     * Visual configurations for personalizing your pipeline.
     */
    display?: pulumi.Input<inputs.DisplayOptionsArgs>;
    /**
     * A list of job groups to use for organizing jobs in the web UI. Groups have no functional effect on your pipeline. They are purely for making it easier to grok large pipelines in the web UI.
     */
    groups?: pulumi.Input<pulumi.Input<inputs.GroupArgs>[]>;
    /**
     * A set of jobs for the pipeline to continuously schedule. At least one job is required for a pipeline to be valid.
     */
    jobs: pulumi.Input<pulumi.Input<inputs.JobArgs>[]>;
    /**
     * A set of resource types for resources within the pipeline to use.
     */
    resourceTypes?: pulumi.Input<pulumi.Input<inputs.ResourceTypeArgs>[]>;
    /**
     * A set of resources for the pipeline to continuously check.
     */
    resources?: pulumi.Input<pulumi.Input<inputs.ResourceArgs>[]>;
}
